
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model RateRes
 * 
 */
export type RateRes = $Result.DefaultSelection<Prisma.$RateResPayload>
/**
 * Model Restaurant
 * 
 */
export type Restaurant = $Result.DefaultSelection<Prisma.$RestaurantPayload>
/**
 * Model LikeRes
 * 
 */
export type LikeRes = $Result.DefaultSelection<Prisma.$LikeResPayload>
/**
 * Model FoodType
 * 
 */
export type FoodType = $Result.DefaultSelection<Prisma.$FoodTypePayload>
/**
 * Model Food
 * 
 */
export type Food = $Result.DefaultSelection<Prisma.$FoodPayload>
/**
 * Model OrderTable
 * 
 */
export type OrderTable = $Result.DefaultSelection<Prisma.$OrderTablePayload>
/**
 * Model SubFood
 * 
 */
export type SubFood = $Result.DefaultSelection<Prisma.$SubFoodPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.rateRes`: Exposes CRUD operations for the **RateRes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RateRes
    * const rateRes = await prisma.rateRes.findMany()
    * ```
    */
  get rateRes(): Prisma.RateResDelegate<ExtArgs>;

  /**
   * `prisma.restaurant`: Exposes CRUD operations for the **Restaurant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Restaurants
    * const restaurants = await prisma.restaurant.findMany()
    * ```
    */
  get restaurant(): Prisma.RestaurantDelegate<ExtArgs>;

  /**
   * `prisma.likeRes`: Exposes CRUD operations for the **LikeRes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LikeRes
    * const likeRes = await prisma.likeRes.findMany()
    * ```
    */
  get likeRes(): Prisma.LikeResDelegate<ExtArgs>;

  /**
   * `prisma.foodType`: Exposes CRUD operations for the **FoodType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodTypes
    * const foodTypes = await prisma.foodType.findMany()
    * ```
    */
  get foodType(): Prisma.FoodTypeDelegate<ExtArgs>;

  /**
   * `prisma.food`: Exposes CRUD operations for the **Food** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Foods
    * const foods = await prisma.food.findMany()
    * ```
    */
  get food(): Prisma.FoodDelegate<ExtArgs>;

  /**
   * `prisma.orderTable`: Exposes CRUD operations for the **OrderTable** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderTables
    * const orderTables = await prisma.orderTable.findMany()
    * ```
    */
  get orderTable(): Prisma.OrderTableDelegate<ExtArgs>;

  /**
   * `prisma.subFood`: Exposes CRUD operations for the **SubFood** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubFoods
    * const subFoods = await prisma.subFood.findMany()
    * ```
    */
  get subFood(): Prisma.SubFoodDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.3.0
   * Query Engine version: e90b936d84779543cbe0e494bc8b9d7337fad8e4
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    RateRes: 'RateRes',
    Restaurant: 'Restaurant',
    LikeRes: 'LikeRes',
    FoodType: 'FoodType',
    Food: 'Food',
    OrderTable: 'OrderTable',
    SubFood: 'SubFood'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'rateRes' | 'restaurant' | 'likeRes' | 'foodType' | 'food' | 'orderTable' | 'subFood'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      RateRes: {
        payload: Prisma.$RateResPayload<ExtArgs>
        fields: Prisma.RateResFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RateResFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RateResPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RateResFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RateResPayload>
          }
          findFirst: {
            args: Prisma.RateResFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RateResPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RateResFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RateResPayload>
          }
          findMany: {
            args: Prisma.RateResFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RateResPayload>[]
          }
          create: {
            args: Prisma.RateResCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RateResPayload>
          }
          createMany: {
            args: Prisma.RateResCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RateResDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RateResPayload>
          }
          update: {
            args: Prisma.RateResUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RateResPayload>
          }
          deleteMany: {
            args: Prisma.RateResDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RateResUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RateResUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RateResPayload>
          }
          aggregate: {
            args: Prisma.RateResAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRateRes>
          }
          groupBy: {
            args: Prisma.RateResGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RateResGroupByOutputType>[]
          }
          count: {
            args: Prisma.RateResCountArgs<ExtArgs>,
            result: $Utils.Optional<RateResCountAggregateOutputType> | number
          }
        }
      }
      Restaurant: {
        payload: Prisma.$RestaurantPayload<ExtArgs>
        fields: Prisma.RestaurantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RestaurantFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RestaurantFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          findFirst: {
            args: Prisma.RestaurantFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RestaurantFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          findMany: {
            args: Prisma.RestaurantFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>[]
          }
          create: {
            args: Prisma.RestaurantCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          createMany: {
            args: Prisma.RestaurantCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RestaurantDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          update: {
            args: Prisma.RestaurantUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          deleteMany: {
            args: Prisma.RestaurantDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RestaurantUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RestaurantUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          aggregate: {
            args: Prisma.RestaurantAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRestaurant>
          }
          groupBy: {
            args: Prisma.RestaurantGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RestaurantGroupByOutputType>[]
          }
          count: {
            args: Prisma.RestaurantCountArgs<ExtArgs>,
            result: $Utils.Optional<RestaurantCountAggregateOutputType> | number
          }
        }
      }
      LikeRes: {
        payload: Prisma.$LikeResPayload<ExtArgs>
        fields: Prisma.LikeResFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikeResFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeResPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikeResFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeResPayload>
          }
          findFirst: {
            args: Prisma.LikeResFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeResPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikeResFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeResPayload>
          }
          findMany: {
            args: Prisma.LikeResFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeResPayload>[]
          }
          create: {
            args: Prisma.LikeResCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeResPayload>
          }
          createMany: {
            args: Prisma.LikeResCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LikeResDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeResPayload>
          }
          update: {
            args: Prisma.LikeResUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeResPayload>
          }
          deleteMany: {
            args: Prisma.LikeResDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LikeResUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LikeResUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikeResPayload>
          }
          aggregate: {
            args: Prisma.LikeResAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLikeRes>
          }
          groupBy: {
            args: Prisma.LikeResGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LikeResGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikeResCountArgs<ExtArgs>,
            result: $Utils.Optional<LikeResCountAggregateOutputType> | number
          }
        }
      }
      FoodType: {
        payload: Prisma.$FoodTypePayload<ExtArgs>
        fields: Prisma.FoodTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodTypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodTypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodTypePayload>
          }
          findFirst: {
            args: Prisma.FoodTypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodTypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodTypePayload>
          }
          findMany: {
            args: Prisma.FoodTypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodTypePayload>[]
          }
          create: {
            args: Prisma.FoodTypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodTypePayload>
          }
          createMany: {
            args: Prisma.FoodTypeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FoodTypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodTypePayload>
          }
          update: {
            args: Prisma.FoodTypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodTypePayload>
          }
          deleteMany: {
            args: Prisma.FoodTypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FoodTypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FoodTypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodTypePayload>
          }
          aggregate: {
            args: Prisma.FoodTypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFoodType>
          }
          groupBy: {
            args: Prisma.FoodTypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FoodTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodTypeCountArgs<ExtArgs>,
            result: $Utils.Optional<FoodTypeCountAggregateOutputType> | number
          }
        }
      }
      Food: {
        payload: Prisma.$FoodPayload<ExtArgs>
        fields: Prisma.FoodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          findFirst: {
            args: Prisma.FoodFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          findMany: {
            args: Prisma.FoodFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>[]
          }
          create: {
            args: Prisma.FoodCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          createMany: {
            args: Prisma.FoodCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FoodDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          update: {
            args: Prisma.FoodUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          deleteMany: {
            args: Prisma.FoodDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FoodUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FoodUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          aggregate: {
            args: Prisma.FoodAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFood>
          }
          groupBy: {
            args: Prisma.FoodGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FoodGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodCountArgs<ExtArgs>,
            result: $Utils.Optional<FoodCountAggregateOutputType> | number
          }
        }
      }
      OrderTable: {
        payload: Prisma.$OrderTablePayload<ExtArgs>
        fields: Prisma.OrderTableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderTableFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderTablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderTableFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderTablePayload>
          }
          findFirst: {
            args: Prisma.OrderTableFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderTablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderTableFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderTablePayload>
          }
          findMany: {
            args: Prisma.OrderTableFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderTablePayload>[]
          }
          create: {
            args: Prisma.OrderTableCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderTablePayload>
          }
          createMany: {
            args: Prisma.OrderTableCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OrderTableDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderTablePayload>
          }
          update: {
            args: Prisma.OrderTableUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderTablePayload>
          }
          deleteMany: {
            args: Prisma.OrderTableDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrderTableUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrderTableUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderTablePayload>
          }
          aggregate: {
            args: Prisma.OrderTableAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrderTable>
          }
          groupBy: {
            args: Prisma.OrderTableGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrderTableGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderTableCountArgs<ExtArgs>,
            result: $Utils.Optional<OrderTableCountAggregateOutputType> | number
          }
        }
      }
      SubFood: {
        payload: Prisma.$SubFoodPayload<ExtArgs>
        fields: Prisma.SubFoodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubFoodFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubFoodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubFoodFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubFoodPayload>
          }
          findFirst: {
            args: Prisma.SubFoodFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubFoodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubFoodFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubFoodPayload>
          }
          findMany: {
            args: Prisma.SubFoodFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubFoodPayload>[]
          }
          create: {
            args: Prisma.SubFoodCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubFoodPayload>
          }
          createMany: {
            args: Prisma.SubFoodCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubFoodDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubFoodPayload>
          }
          update: {
            args: Prisma.SubFoodUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubFoodPayload>
          }
          deleteMany: {
            args: Prisma.SubFoodDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubFoodUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubFoodUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubFoodPayload>
          }
          aggregate: {
            args: Prisma.SubFoodAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubFood>
          }
          groupBy: {
            args: Prisma.SubFoodGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubFoodGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubFoodCountArgs<ExtArgs>,
            result: $Utils.Optional<SubFoodCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    rate_res: number
    like_res: number
    order_table: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    rate_res?: boolean | UserCountOutputTypeCountRate_resArgs
    like_res?: boolean | UserCountOutputTypeCountLike_resArgs
    order_table?: boolean | UserCountOutputTypeCountOrder_tableArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRate_resArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RateResWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLike_resArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LikeResWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrder_tableArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OrderTableWhereInput
  }



  /**
   * Count Type RestaurantCountOutputType
   */

  export type RestaurantCountOutputType = {
    rate_res: number
    like_res: number
  }

  export type RestaurantCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    rate_res?: boolean | RestaurantCountOutputTypeCountRate_resArgs
    like_res?: boolean | RestaurantCountOutputTypeCountLike_resArgs
  }

  // Custom InputTypes

  /**
   * RestaurantCountOutputType without action
   */
  export type RestaurantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantCountOutputType
     */
    select?: RestaurantCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RestaurantCountOutputType without action
   */
  export type RestaurantCountOutputTypeCountRate_resArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RateResWhereInput
  }


  /**
   * RestaurantCountOutputType without action
   */
  export type RestaurantCountOutputTypeCountLike_resArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LikeResWhereInput
  }



  /**
   * Count Type FoodTypeCountOutputType
   */

  export type FoodTypeCountOutputType = {
    foods: number
  }

  export type FoodTypeCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    foods?: boolean | FoodTypeCountOutputTypeCountFoodsArgs
  }

  // Custom InputTypes

  /**
   * FoodTypeCountOutputType without action
   */
  export type FoodTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodTypeCountOutputType
     */
    select?: FoodTypeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FoodTypeCountOutputType without action
   */
  export type FoodTypeCountOutputTypeCountFoodsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FoodWhereInput
  }



  /**
   * Count Type FoodCountOutputType
   */

  export type FoodCountOutputType = {
    sub_foods: number
    order_tables: number
  }

  export type FoodCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    sub_foods?: boolean | FoodCountOutputTypeCountSub_foodsArgs
    order_tables?: boolean | FoodCountOutputTypeCountOrder_tablesArgs
  }

  // Custom InputTypes

  /**
   * FoodCountOutputType without action
   */
  export type FoodCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodCountOutputType
     */
    select?: FoodCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FoodCountOutputType without action
   */
  export type FoodCountOutputTypeCountSub_foodsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SubFoodWhereInput
  }


  /**
   * FoodCountOutputType without action
   */
  export type FoodCountOutputTypeCountOrder_tablesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OrderTableWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    user_id: number | null
  }

  export type UserSumAggregateOutputType = {
    user_id: number | null
  }

  export type UserMinAggregateOutputType = {
    user_id: number | null
    full_name: string | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: number | null
    full_name: string | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    full_name: number
    email: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    user_id?: true
  }

  export type UserSumAggregateInputType = {
    user_id?: true
  }

  export type UserMinAggregateInputType = {
    user_id?: true
    full_name?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    full_name?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    full_name?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: number
    full_name: string
    email: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    full_name?: boolean
    email?: boolean
    password?: boolean
    rate_res?: boolean | User$rate_resArgs<ExtArgs>
    like_res?: boolean | User$like_resArgs<ExtArgs>
    order_table?: boolean | User$order_tableArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    user_id?: boolean
    full_name?: boolean
    email?: boolean
    password?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    rate_res?: boolean | User$rate_resArgs<ExtArgs>
    like_res?: boolean | User$like_resArgs<ExtArgs>
    order_table?: boolean | User$order_tableArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      rate_res: Prisma.$RateResPayload<ExtArgs>[]
      like_res: Prisma.$LikeResPayload<ExtArgs>[]
      order_table: Prisma.$OrderTablePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      user_id: number
      full_name: string
      email: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    rate_res<T extends User$rate_resArgs<ExtArgs> = {}>(args?: Subset<T, User$rate_resArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RateResPayload<ExtArgs>, T, 'findMany'> | Null>;

    like_res<T extends User$like_resArgs<ExtArgs> = {}>(args?: Subset<T, User$like_resArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeResPayload<ExtArgs>, T, 'findMany'> | Null>;

    order_table<T extends User$order_tableArgs<ExtArgs> = {}>(args?: Subset<T, User$order_tableArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderTablePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly user_id: FieldRef<"User", 'Int'>
    readonly full_name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.rate_res
   */
  export type User$rate_resArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateRes
     */
    select?: RateResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateResInclude<ExtArgs> | null
    where?: RateResWhereInput
    orderBy?: RateResOrderByWithRelationInput | RateResOrderByWithRelationInput[]
    cursor?: RateResWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RateResScalarFieldEnum | RateResScalarFieldEnum[]
  }


  /**
   * User.like_res
   */
  export type User$like_resArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeRes
     */
    select?: LikeResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeResInclude<ExtArgs> | null
    where?: LikeResWhereInput
    orderBy?: LikeResOrderByWithRelationInput | LikeResOrderByWithRelationInput[]
    cursor?: LikeResWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeResScalarFieldEnum | LikeResScalarFieldEnum[]
  }


  /**
   * User.order_table
   */
  export type User$order_tableArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderTable
     */
    select?: OrderTableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderTableInclude<ExtArgs> | null
    where?: OrderTableWhereInput
    orderBy?: OrderTableOrderByWithRelationInput | OrderTableOrderByWithRelationInput[]
    cursor?: OrderTableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderTableScalarFieldEnum | OrderTableScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model RateRes
   */

  export type AggregateRateRes = {
    _count: RateResCountAggregateOutputType | null
    _avg: RateResAvgAggregateOutputType | null
    _sum: RateResSumAggregateOutputType | null
    _min: RateResMinAggregateOutputType | null
    _max: RateResMaxAggregateOutputType | null
  }

  export type RateResAvgAggregateOutputType = {
    user_id: number | null
    res_id: number | null
    amount: number | null
  }

  export type RateResSumAggregateOutputType = {
    user_id: number | null
    res_id: number | null
    amount: number | null
  }

  export type RateResMinAggregateOutputType = {
    user_id: number | null
    res_id: number | null
    amount: number | null
    date_rate: Date | null
  }

  export type RateResMaxAggregateOutputType = {
    user_id: number | null
    res_id: number | null
    amount: number | null
    date_rate: Date | null
  }

  export type RateResCountAggregateOutputType = {
    user_id: number
    res_id: number
    amount: number
    date_rate: number
    _all: number
  }


  export type RateResAvgAggregateInputType = {
    user_id?: true
    res_id?: true
    amount?: true
  }

  export type RateResSumAggregateInputType = {
    user_id?: true
    res_id?: true
    amount?: true
  }

  export type RateResMinAggregateInputType = {
    user_id?: true
    res_id?: true
    amount?: true
    date_rate?: true
  }

  export type RateResMaxAggregateInputType = {
    user_id?: true
    res_id?: true
    amount?: true
    date_rate?: true
  }

  export type RateResCountAggregateInputType = {
    user_id?: true
    res_id?: true
    amount?: true
    date_rate?: true
    _all?: true
  }

  export type RateResAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which RateRes to aggregate.
     */
    where?: RateResWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RateRes to fetch.
     */
    orderBy?: RateResOrderByWithRelationInput | RateResOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RateResWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RateRes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RateRes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RateRes
    **/
    _count?: true | RateResCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RateResAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RateResSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RateResMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RateResMaxAggregateInputType
  }

  export type GetRateResAggregateType<T extends RateResAggregateArgs> = {
        [P in keyof T & keyof AggregateRateRes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRateRes[P]>
      : GetScalarType<T[P], AggregateRateRes[P]>
  }




  export type RateResGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RateResWhereInput
    orderBy?: RateResOrderByWithAggregationInput | RateResOrderByWithAggregationInput[]
    by: RateResScalarFieldEnum[] | RateResScalarFieldEnum
    having?: RateResScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RateResCountAggregateInputType | true
    _avg?: RateResAvgAggregateInputType
    _sum?: RateResSumAggregateInputType
    _min?: RateResMinAggregateInputType
    _max?: RateResMaxAggregateInputType
  }

  export type RateResGroupByOutputType = {
    user_id: number
    res_id: number
    amount: number
    date_rate: Date
    _count: RateResCountAggregateOutputType | null
    _avg: RateResAvgAggregateOutputType | null
    _sum: RateResSumAggregateOutputType | null
    _min: RateResMinAggregateOutputType | null
    _max: RateResMaxAggregateOutputType | null
  }

  type GetRateResGroupByPayload<T extends RateResGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RateResGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RateResGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RateResGroupByOutputType[P]>
            : GetScalarType<T[P], RateResGroupByOutputType[P]>
        }
      >
    >


  export type RateResSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    res_id?: boolean
    amount?: boolean
    date_rate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    restaurant?: boolean | RestaurantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rateRes"]>

  export type RateResSelectScalar = {
    user_id?: boolean
    res_id?: boolean
    amount?: boolean
    date_rate?: boolean
  }

  export type RateResInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    restaurant?: boolean | RestaurantDefaultArgs<ExtArgs>
  }


  export type $RateResPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "RateRes"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      restaurant: Prisma.$RestaurantPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      user_id: number
      res_id: number
      amount: number
      date_rate: Date
    }, ExtArgs["result"]["rateRes"]>
    composites: {}
  }


  type RateResGetPayload<S extends boolean | null | undefined | RateResDefaultArgs> = $Result.GetResult<Prisma.$RateResPayload, S>

  type RateResCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RateResFindManyArgs, 'select' | 'include'> & {
      select?: RateResCountAggregateInputType | true
    }

  export interface RateResDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RateRes'], meta: { name: 'RateRes' } }
    /**
     * Find zero or one RateRes that matches the filter.
     * @param {RateResFindUniqueArgs} args - Arguments to find a RateRes
     * @example
     * // Get one RateRes
     * const rateRes = await prisma.rateRes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RateResFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RateResFindUniqueArgs<ExtArgs>>
    ): Prisma__RateResClient<$Result.GetResult<Prisma.$RateResPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RateRes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RateResFindUniqueOrThrowArgs} args - Arguments to find a RateRes
     * @example
     * // Get one RateRes
     * const rateRes = await prisma.rateRes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RateResFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RateResFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RateResClient<$Result.GetResult<Prisma.$RateResPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RateRes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateResFindFirstArgs} args - Arguments to find a RateRes
     * @example
     * // Get one RateRes
     * const rateRes = await prisma.rateRes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RateResFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RateResFindFirstArgs<ExtArgs>>
    ): Prisma__RateResClient<$Result.GetResult<Prisma.$RateResPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RateRes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateResFindFirstOrThrowArgs} args - Arguments to find a RateRes
     * @example
     * // Get one RateRes
     * const rateRes = await prisma.rateRes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RateResFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RateResFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RateResClient<$Result.GetResult<Prisma.$RateResPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RateRes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateResFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RateRes
     * const rateRes = await prisma.rateRes.findMany()
     * 
     * // Get first 10 RateRes
     * const rateRes = await prisma.rateRes.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const rateResWithUser_idOnly = await prisma.rateRes.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends RateResFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RateResFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RateResPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RateRes.
     * @param {RateResCreateArgs} args - Arguments to create a RateRes.
     * @example
     * // Create one RateRes
     * const RateRes = await prisma.rateRes.create({
     *   data: {
     *     // ... data to create a RateRes
     *   }
     * })
     * 
    **/
    create<T extends RateResCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RateResCreateArgs<ExtArgs>>
    ): Prisma__RateResClient<$Result.GetResult<Prisma.$RateResPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RateRes.
     *     @param {RateResCreateManyArgs} args - Arguments to create many RateRes.
     *     @example
     *     // Create many RateRes
     *     const rateRes = await prisma.rateRes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RateResCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RateResCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RateRes.
     * @param {RateResDeleteArgs} args - Arguments to delete one RateRes.
     * @example
     * // Delete one RateRes
     * const RateRes = await prisma.rateRes.delete({
     *   where: {
     *     // ... filter to delete one RateRes
     *   }
     * })
     * 
    **/
    delete<T extends RateResDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RateResDeleteArgs<ExtArgs>>
    ): Prisma__RateResClient<$Result.GetResult<Prisma.$RateResPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RateRes.
     * @param {RateResUpdateArgs} args - Arguments to update one RateRes.
     * @example
     * // Update one RateRes
     * const rateRes = await prisma.rateRes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RateResUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RateResUpdateArgs<ExtArgs>>
    ): Prisma__RateResClient<$Result.GetResult<Prisma.$RateResPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RateRes.
     * @param {RateResDeleteManyArgs} args - Arguments to filter RateRes to delete.
     * @example
     * // Delete a few RateRes
     * const { count } = await prisma.rateRes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RateResDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RateResDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RateRes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateResUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RateRes
     * const rateRes = await prisma.rateRes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RateResUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RateResUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RateRes.
     * @param {RateResUpsertArgs} args - Arguments to update or create a RateRes.
     * @example
     * // Update or create a RateRes
     * const rateRes = await prisma.rateRes.upsert({
     *   create: {
     *     // ... data to create a RateRes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RateRes we want to update
     *   }
     * })
    **/
    upsert<T extends RateResUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RateResUpsertArgs<ExtArgs>>
    ): Prisma__RateResClient<$Result.GetResult<Prisma.$RateResPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RateRes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateResCountArgs} args - Arguments to filter RateRes to count.
     * @example
     * // Count the number of RateRes
     * const count = await prisma.rateRes.count({
     *   where: {
     *     // ... the filter for the RateRes we want to count
     *   }
     * })
    **/
    count<T extends RateResCountArgs>(
      args?: Subset<T, RateResCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RateResCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RateRes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateResAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RateResAggregateArgs>(args: Subset<T, RateResAggregateArgs>): Prisma.PrismaPromise<GetRateResAggregateType<T>>

    /**
     * Group by RateRes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateResGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RateResGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RateResGroupByArgs['orderBy'] }
        : { orderBy?: RateResGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RateResGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRateResGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RateRes model
   */
  readonly fields: RateResFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RateRes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RateResClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    restaurant<T extends RestaurantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RestaurantDefaultArgs<ExtArgs>>): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RateRes model
   */ 
  interface RateResFieldRefs {
    readonly user_id: FieldRef<"RateRes", 'Int'>
    readonly res_id: FieldRef<"RateRes", 'Int'>
    readonly amount: FieldRef<"RateRes", 'Int'>
    readonly date_rate: FieldRef<"RateRes", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * RateRes findUnique
   */
  export type RateResFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateRes
     */
    select?: RateResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateResInclude<ExtArgs> | null
    /**
     * Filter, which RateRes to fetch.
     */
    where: RateResWhereUniqueInput
  }


  /**
   * RateRes findUniqueOrThrow
   */
  export type RateResFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateRes
     */
    select?: RateResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateResInclude<ExtArgs> | null
    /**
     * Filter, which RateRes to fetch.
     */
    where: RateResWhereUniqueInput
  }


  /**
   * RateRes findFirst
   */
  export type RateResFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateRes
     */
    select?: RateResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateResInclude<ExtArgs> | null
    /**
     * Filter, which RateRes to fetch.
     */
    where?: RateResWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RateRes to fetch.
     */
    orderBy?: RateResOrderByWithRelationInput | RateResOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RateRes.
     */
    cursor?: RateResWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RateRes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RateRes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RateRes.
     */
    distinct?: RateResScalarFieldEnum | RateResScalarFieldEnum[]
  }


  /**
   * RateRes findFirstOrThrow
   */
  export type RateResFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateRes
     */
    select?: RateResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateResInclude<ExtArgs> | null
    /**
     * Filter, which RateRes to fetch.
     */
    where?: RateResWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RateRes to fetch.
     */
    orderBy?: RateResOrderByWithRelationInput | RateResOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RateRes.
     */
    cursor?: RateResWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RateRes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RateRes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RateRes.
     */
    distinct?: RateResScalarFieldEnum | RateResScalarFieldEnum[]
  }


  /**
   * RateRes findMany
   */
  export type RateResFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateRes
     */
    select?: RateResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateResInclude<ExtArgs> | null
    /**
     * Filter, which RateRes to fetch.
     */
    where?: RateResWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RateRes to fetch.
     */
    orderBy?: RateResOrderByWithRelationInput | RateResOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RateRes.
     */
    cursor?: RateResWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RateRes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RateRes.
     */
    skip?: number
    distinct?: RateResScalarFieldEnum | RateResScalarFieldEnum[]
  }


  /**
   * RateRes create
   */
  export type RateResCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateRes
     */
    select?: RateResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateResInclude<ExtArgs> | null
    /**
     * The data needed to create a RateRes.
     */
    data: XOR<RateResCreateInput, RateResUncheckedCreateInput>
  }


  /**
   * RateRes createMany
   */
  export type RateResCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RateRes.
     */
    data: RateResCreateManyInput | RateResCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * RateRes update
   */
  export type RateResUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateRes
     */
    select?: RateResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateResInclude<ExtArgs> | null
    /**
     * The data needed to update a RateRes.
     */
    data: XOR<RateResUpdateInput, RateResUncheckedUpdateInput>
    /**
     * Choose, which RateRes to update.
     */
    where: RateResWhereUniqueInput
  }


  /**
   * RateRes updateMany
   */
  export type RateResUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RateRes.
     */
    data: XOR<RateResUpdateManyMutationInput, RateResUncheckedUpdateManyInput>
    /**
     * Filter which RateRes to update
     */
    where?: RateResWhereInput
  }


  /**
   * RateRes upsert
   */
  export type RateResUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateRes
     */
    select?: RateResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateResInclude<ExtArgs> | null
    /**
     * The filter to search for the RateRes to update in case it exists.
     */
    where: RateResWhereUniqueInput
    /**
     * In case the RateRes found by the `where` argument doesn't exist, create a new RateRes with this data.
     */
    create: XOR<RateResCreateInput, RateResUncheckedCreateInput>
    /**
     * In case the RateRes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RateResUpdateInput, RateResUncheckedUpdateInput>
  }


  /**
   * RateRes delete
   */
  export type RateResDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateRes
     */
    select?: RateResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateResInclude<ExtArgs> | null
    /**
     * Filter which RateRes to delete.
     */
    where: RateResWhereUniqueInput
  }


  /**
   * RateRes deleteMany
   */
  export type RateResDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which RateRes to delete
     */
    where?: RateResWhereInput
  }


  /**
   * RateRes without action
   */
  export type RateResDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateRes
     */
    select?: RateResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateResInclude<ExtArgs> | null
  }



  /**
   * Model Restaurant
   */

  export type AggregateRestaurant = {
    _count: RestaurantCountAggregateOutputType | null
    _avg: RestaurantAvgAggregateOutputType | null
    _sum: RestaurantSumAggregateOutputType | null
    _min: RestaurantMinAggregateOutputType | null
    _max: RestaurantMaxAggregateOutputType | null
  }

  export type RestaurantAvgAggregateOutputType = {
    res_id: number | null
  }

  export type RestaurantSumAggregateOutputType = {
    res_id: number | null
  }

  export type RestaurantMinAggregateOutputType = {
    res_id: number | null
    res_name: string | null
    image: string | null
    description: string | null
  }

  export type RestaurantMaxAggregateOutputType = {
    res_id: number | null
    res_name: string | null
    image: string | null
    description: string | null
  }

  export type RestaurantCountAggregateOutputType = {
    res_id: number
    res_name: number
    image: number
    description: number
    _all: number
  }


  export type RestaurantAvgAggregateInputType = {
    res_id?: true
  }

  export type RestaurantSumAggregateInputType = {
    res_id?: true
  }

  export type RestaurantMinAggregateInputType = {
    res_id?: true
    res_name?: true
    image?: true
    description?: true
  }

  export type RestaurantMaxAggregateInputType = {
    res_id?: true
    res_name?: true
    image?: true
    description?: true
  }

  export type RestaurantCountAggregateInputType = {
    res_id?: true
    res_name?: true
    image?: true
    description?: true
    _all?: true
  }

  export type RestaurantAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Restaurant to aggregate.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Restaurants
    **/
    _count?: true | RestaurantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RestaurantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RestaurantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RestaurantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RestaurantMaxAggregateInputType
  }

  export type GetRestaurantAggregateType<T extends RestaurantAggregateArgs> = {
        [P in keyof T & keyof AggregateRestaurant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRestaurant[P]>
      : GetScalarType<T[P], AggregateRestaurant[P]>
  }




  export type RestaurantGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RestaurantWhereInput
    orderBy?: RestaurantOrderByWithAggregationInput | RestaurantOrderByWithAggregationInput[]
    by: RestaurantScalarFieldEnum[] | RestaurantScalarFieldEnum
    having?: RestaurantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RestaurantCountAggregateInputType | true
    _avg?: RestaurantAvgAggregateInputType
    _sum?: RestaurantSumAggregateInputType
    _min?: RestaurantMinAggregateInputType
    _max?: RestaurantMaxAggregateInputType
  }

  export type RestaurantGroupByOutputType = {
    res_id: number
    res_name: string
    image: string
    description: string
    _count: RestaurantCountAggregateOutputType | null
    _avg: RestaurantAvgAggregateOutputType | null
    _sum: RestaurantSumAggregateOutputType | null
    _min: RestaurantMinAggregateOutputType | null
    _max: RestaurantMaxAggregateOutputType | null
  }

  type GetRestaurantGroupByPayload<T extends RestaurantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RestaurantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RestaurantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RestaurantGroupByOutputType[P]>
            : GetScalarType<T[P], RestaurantGroupByOutputType[P]>
        }
      >
    >


  export type RestaurantSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    res_id?: boolean
    res_name?: boolean
    image?: boolean
    description?: boolean
    rate_res?: boolean | Restaurant$rate_resArgs<ExtArgs>
    like_res?: boolean | Restaurant$like_resArgs<ExtArgs>
    _count?: boolean | RestaurantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["restaurant"]>

  export type RestaurantSelectScalar = {
    res_id?: boolean
    res_name?: boolean
    image?: boolean
    description?: boolean
  }

  export type RestaurantInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    rate_res?: boolean | Restaurant$rate_resArgs<ExtArgs>
    like_res?: boolean | Restaurant$like_resArgs<ExtArgs>
    _count?: boolean | RestaurantCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RestaurantPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Restaurant"
    objects: {
      rate_res: Prisma.$RateResPayload<ExtArgs>[]
      like_res: Prisma.$LikeResPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      res_id: number
      res_name: string
      image: string
      description: string
    }, ExtArgs["result"]["restaurant"]>
    composites: {}
  }


  type RestaurantGetPayload<S extends boolean | null | undefined | RestaurantDefaultArgs> = $Result.GetResult<Prisma.$RestaurantPayload, S>

  type RestaurantCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RestaurantFindManyArgs, 'select' | 'include'> & {
      select?: RestaurantCountAggregateInputType | true
    }

  export interface RestaurantDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Restaurant'], meta: { name: 'Restaurant' } }
    /**
     * Find zero or one Restaurant that matches the filter.
     * @param {RestaurantFindUniqueArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RestaurantFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantFindUniqueArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Restaurant that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RestaurantFindUniqueOrThrowArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RestaurantFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Restaurant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantFindFirstArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RestaurantFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantFindFirstArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Restaurant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantFindFirstOrThrowArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RestaurantFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Restaurants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Restaurants
     * const restaurants = await prisma.restaurant.findMany()
     * 
     * // Get first 10 Restaurants
     * const restaurants = await prisma.restaurant.findMany({ take: 10 })
     * 
     * // Only select the `res_id`
     * const restaurantWithRes_idOnly = await prisma.restaurant.findMany({ select: { res_id: true } })
     * 
    **/
    findMany<T extends RestaurantFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Restaurant.
     * @param {RestaurantCreateArgs} args - Arguments to create a Restaurant.
     * @example
     * // Create one Restaurant
     * const Restaurant = await prisma.restaurant.create({
     *   data: {
     *     // ... data to create a Restaurant
     *   }
     * })
     * 
    **/
    create<T extends RestaurantCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantCreateArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Restaurants.
     *     @param {RestaurantCreateManyArgs} args - Arguments to create many Restaurants.
     *     @example
     *     // Create many Restaurants
     *     const restaurant = await prisma.restaurant.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RestaurantCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Restaurant.
     * @param {RestaurantDeleteArgs} args - Arguments to delete one Restaurant.
     * @example
     * // Delete one Restaurant
     * const Restaurant = await prisma.restaurant.delete({
     *   where: {
     *     // ... filter to delete one Restaurant
     *   }
     * })
     * 
    **/
    delete<T extends RestaurantDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantDeleteArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Restaurant.
     * @param {RestaurantUpdateArgs} args - Arguments to update one Restaurant.
     * @example
     * // Update one Restaurant
     * const restaurant = await prisma.restaurant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RestaurantUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantUpdateArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Restaurants.
     * @param {RestaurantDeleteManyArgs} args - Arguments to filter Restaurants to delete.
     * @example
     * // Delete a few Restaurants
     * const { count } = await prisma.restaurant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RestaurantDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Restaurants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Restaurants
     * const restaurant = await prisma.restaurant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RestaurantUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Restaurant.
     * @param {RestaurantUpsertArgs} args - Arguments to update or create a Restaurant.
     * @example
     * // Update or create a Restaurant
     * const restaurant = await prisma.restaurant.upsert({
     *   create: {
     *     // ... data to create a Restaurant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Restaurant we want to update
     *   }
     * })
    **/
    upsert<T extends RestaurantUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantUpsertArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Restaurants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantCountArgs} args - Arguments to filter Restaurants to count.
     * @example
     * // Count the number of Restaurants
     * const count = await prisma.restaurant.count({
     *   where: {
     *     // ... the filter for the Restaurants we want to count
     *   }
     * })
    **/
    count<T extends RestaurantCountArgs>(
      args?: Subset<T, RestaurantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RestaurantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Restaurant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RestaurantAggregateArgs>(args: Subset<T, RestaurantAggregateArgs>): Prisma.PrismaPromise<GetRestaurantAggregateType<T>>

    /**
     * Group by Restaurant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RestaurantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RestaurantGroupByArgs['orderBy'] }
        : { orderBy?: RestaurantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RestaurantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRestaurantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Restaurant model
   */
  readonly fields: RestaurantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Restaurant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RestaurantClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    rate_res<T extends Restaurant$rate_resArgs<ExtArgs> = {}>(args?: Subset<T, Restaurant$rate_resArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RateResPayload<ExtArgs>, T, 'findMany'> | Null>;

    like_res<T extends Restaurant$like_resArgs<ExtArgs> = {}>(args?: Subset<T, Restaurant$like_resArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeResPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Restaurant model
   */ 
  interface RestaurantFieldRefs {
    readonly res_id: FieldRef<"Restaurant", 'Int'>
    readonly res_name: FieldRef<"Restaurant", 'String'>
    readonly image: FieldRef<"Restaurant", 'String'>
    readonly description: FieldRef<"Restaurant", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Restaurant findUnique
   */
  export type RestaurantFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where: RestaurantWhereUniqueInput
  }


  /**
   * Restaurant findUniqueOrThrow
   */
  export type RestaurantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where: RestaurantWhereUniqueInput
  }


  /**
   * Restaurant findFirst
   */
  export type RestaurantFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Restaurants.
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Restaurants.
     */
    distinct?: RestaurantScalarFieldEnum | RestaurantScalarFieldEnum[]
  }


  /**
   * Restaurant findFirstOrThrow
   */
  export type RestaurantFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Restaurants.
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Restaurants.
     */
    distinct?: RestaurantScalarFieldEnum | RestaurantScalarFieldEnum[]
  }


  /**
   * Restaurant findMany
   */
  export type RestaurantFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurants to fetch.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Restaurants.
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    distinct?: RestaurantScalarFieldEnum | RestaurantScalarFieldEnum[]
  }


  /**
   * Restaurant create
   */
  export type RestaurantCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * The data needed to create a Restaurant.
     */
    data: XOR<RestaurantCreateInput, RestaurantUncheckedCreateInput>
  }


  /**
   * Restaurant createMany
   */
  export type RestaurantCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Restaurants.
     */
    data: RestaurantCreateManyInput | RestaurantCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Restaurant update
   */
  export type RestaurantUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * The data needed to update a Restaurant.
     */
    data: XOR<RestaurantUpdateInput, RestaurantUncheckedUpdateInput>
    /**
     * Choose, which Restaurant to update.
     */
    where: RestaurantWhereUniqueInput
  }


  /**
   * Restaurant updateMany
   */
  export type RestaurantUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Restaurants.
     */
    data: XOR<RestaurantUpdateManyMutationInput, RestaurantUncheckedUpdateManyInput>
    /**
     * Filter which Restaurants to update
     */
    where?: RestaurantWhereInput
  }


  /**
   * Restaurant upsert
   */
  export type RestaurantUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * The filter to search for the Restaurant to update in case it exists.
     */
    where: RestaurantWhereUniqueInput
    /**
     * In case the Restaurant found by the `where` argument doesn't exist, create a new Restaurant with this data.
     */
    create: XOR<RestaurantCreateInput, RestaurantUncheckedCreateInput>
    /**
     * In case the Restaurant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RestaurantUpdateInput, RestaurantUncheckedUpdateInput>
  }


  /**
   * Restaurant delete
   */
  export type RestaurantDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter which Restaurant to delete.
     */
    where: RestaurantWhereUniqueInput
  }


  /**
   * Restaurant deleteMany
   */
  export type RestaurantDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Restaurants to delete
     */
    where?: RestaurantWhereInput
  }


  /**
   * Restaurant.rate_res
   */
  export type Restaurant$rate_resArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateRes
     */
    select?: RateResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateResInclude<ExtArgs> | null
    where?: RateResWhereInput
    orderBy?: RateResOrderByWithRelationInput | RateResOrderByWithRelationInput[]
    cursor?: RateResWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RateResScalarFieldEnum | RateResScalarFieldEnum[]
  }


  /**
   * Restaurant.like_res
   */
  export type Restaurant$like_resArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeRes
     */
    select?: LikeResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeResInclude<ExtArgs> | null
    where?: LikeResWhereInput
    orderBy?: LikeResOrderByWithRelationInput | LikeResOrderByWithRelationInput[]
    cursor?: LikeResWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeResScalarFieldEnum | LikeResScalarFieldEnum[]
  }


  /**
   * Restaurant without action
   */
  export type RestaurantDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
  }



  /**
   * Model LikeRes
   */

  export type AggregateLikeRes = {
    _count: LikeResCountAggregateOutputType | null
    _avg: LikeResAvgAggregateOutputType | null
    _sum: LikeResSumAggregateOutputType | null
    _min: LikeResMinAggregateOutputType | null
    _max: LikeResMaxAggregateOutputType | null
  }

  export type LikeResAvgAggregateOutputType = {
    user_id: number | null
    res_id: number | null
  }

  export type LikeResSumAggregateOutputType = {
    user_id: number | null
    res_id: number | null
  }

  export type LikeResMinAggregateOutputType = {
    user_id: number | null
    res_id: number | null
    date_like: Date | null
  }

  export type LikeResMaxAggregateOutputType = {
    user_id: number | null
    res_id: number | null
    date_like: Date | null
  }

  export type LikeResCountAggregateOutputType = {
    user_id: number
    res_id: number
    date_like: number
    _all: number
  }


  export type LikeResAvgAggregateInputType = {
    user_id?: true
    res_id?: true
  }

  export type LikeResSumAggregateInputType = {
    user_id?: true
    res_id?: true
  }

  export type LikeResMinAggregateInputType = {
    user_id?: true
    res_id?: true
    date_like?: true
  }

  export type LikeResMaxAggregateInputType = {
    user_id?: true
    res_id?: true
    date_like?: true
  }

  export type LikeResCountAggregateInputType = {
    user_id?: true
    res_id?: true
    date_like?: true
    _all?: true
  }

  export type LikeResAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which LikeRes to aggregate.
     */
    where?: LikeResWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeRes to fetch.
     */
    orderBy?: LikeResOrderByWithRelationInput | LikeResOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikeResWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeRes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeRes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LikeRes
    **/
    _count?: true | LikeResCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LikeResAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LikeResSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeResMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeResMaxAggregateInputType
  }

  export type GetLikeResAggregateType<T extends LikeResAggregateArgs> = {
        [P in keyof T & keyof AggregateLikeRes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLikeRes[P]>
      : GetScalarType<T[P], AggregateLikeRes[P]>
  }




  export type LikeResGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LikeResWhereInput
    orderBy?: LikeResOrderByWithAggregationInput | LikeResOrderByWithAggregationInput[]
    by: LikeResScalarFieldEnum[] | LikeResScalarFieldEnum
    having?: LikeResScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeResCountAggregateInputType | true
    _avg?: LikeResAvgAggregateInputType
    _sum?: LikeResSumAggregateInputType
    _min?: LikeResMinAggregateInputType
    _max?: LikeResMaxAggregateInputType
  }

  export type LikeResGroupByOutputType = {
    user_id: number
    res_id: number
    date_like: Date
    _count: LikeResCountAggregateOutputType | null
    _avg: LikeResAvgAggregateOutputType | null
    _sum: LikeResSumAggregateOutputType | null
    _min: LikeResMinAggregateOutputType | null
    _max: LikeResMaxAggregateOutputType | null
  }

  type GetLikeResGroupByPayload<T extends LikeResGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikeResGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeResGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeResGroupByOutputType[P]>
            : GetScalarType<T[P], LikeResGroupByOutputType[P]>
        }
      >
    >


  export type LikeResSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    res_id?: boolean
    date_like?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    restaurant?: boolean | RestaurantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likeRes"]>

  export type LikeResSelectScalar = {
    user_id?: boolean
    res_id?: boolean
    date_like?: boolean
  }

  export type LikeResInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    restaurant?: boolean | RestaurantDefaultArgs<ExtArgs>
  }


  export type $LikeResPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "LikeRes"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      restaurant: Prisma.$RestaurantPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      user_id: number
      res_id: number
      date_like: Date
    }, ExtArgs["result"]["likeRes"]>
    composites: {}
  }


  type LikeResGetPayload<S extends boolean | null | undefined | LikeResDefaultArgs> = $Result.GetResult<Prisma.$LikeResPayload, S>

  type LikeResCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<LikeResFindManyArgs, 'select' | 'include'> & {
      select?: LikeResCountAggregateInputType | true
    }

  export interface LikeResDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LikeRes'], meta: { name: 'LikeRes' } }
    /**
     * Find zero or one LikeRes that matches the filter.
     * @param {LikeResFindUniqueArgs} args - Arguments to find a LikeRes
     * @example
     * // Get one LikeRes
     * const likeRes = await prisma.likeRes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LikeResFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LikeResFindUniqueArgs<ExtArgs>>
    ): Prisma__LikeResClient<$Result.GetResult<Prisma.$LikeResPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LikeRes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LikeResFindUniqueOrThrowArgs} args - Arguments to find a LikeRes
     * @example
     * // Get one LikeRes
     * const likeRes = await prisma.likeRes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LikeResFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeResFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LikeResClient<$Result.GetResult<Prisma.$LikeResPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LikeRes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeResFindFirstArgs} args - Arguments to find a LikeRes
     * @example
     * // Get one LikeRes
     * const likeRes = await prisma.likeRes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LikeResFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeResFindFirstArgs<ExtArgs>>
    ): Prisma__LikeResClient<$Result.GetResult<Prisma.$LikeResPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LikeRes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeResFindFirstOrThrowArgs} args - Arguments to find a LikeRes
     * @example
     * // Get one LikeRes
     * const likeRes = await prisma.likeRes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LikeResFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeResFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LikeResClient<$Result.GetResult<Prisma.$LikeResPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LikeRes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeResFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LikeRes
     * const likeRes = await prisma.likeRes.findMany()
     * 
     * // Get first 10 LikeRes
     * const likeRes = await prisma.likeRes.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const likeResWithUser_idOnly = await prisma.likeRes.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends LikeResFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeResFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeResPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LikeRes.
     * @param {LikeResCreateArgs} args - Arguments to create a LikeRes.
     * @example
     * // Create one LikeRes
     * const LikeRes = await prisma.likeRes.create({
     *   data: {
     *     // ... data to create a LikeRes
     *   }
     * })
     * 
    **/
    create<T extends LikeResCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LikeResCreateArgs<ExtArgs>>
    ): Prisma__LikeResClient<$Result.GetResult<Prisma.$LikeResPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LikeRes.
     *     @param {LikeResCreateManyArgs} args - Arguments to create many LikeRes.
     *     @example
     *     // Create many LikeRes
     *     const likeRes = await prisma.likeRes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LikeResCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeResCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LikeRes.
     * @param {LikeResDeleteArgs} args - Arguments to delete one LikeRes.
     * @example
     * // Delete one LikeRes
     * const LikeRes = await prisma.likeRes.delete({
     *   where: {
     *     // ... filter to delete one LikeRes
     *   }
     * })
     * 
    **/
    delete<T extends LikeResDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LikeResDeleteArgs<ExtArgs>>
    ): Prisma__LikeResClient<$Result.GetResult<Prisma.$LikeResPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LikeRes.
     * @param {LikeResUpdateArgs} args - Arguments to update one LikeRes.
     * @example
     * // Update one LikeRes
     * const likeRes = await prisma.likeRes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LikeResUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LikeResUpdateArgs<ExtArgs>>
    ): Prisma__LikeResClient<$Result.GetResult<Prisma.$LikeResPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LikeRes.
     * @param {LikeResDeleteManyArgs} args - Arguments to filter LikeRes to delete.
     * @example
     * // Delete a few LikeRes
     * const { count } = await prisma.likeRes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LikeResDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeResDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LikeRes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeResUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LikeRes
     * const likeRes = await prisma.likeRes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LikeResUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LikeResUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LikeRes.
     * @param {LikeResUpsertArgs} args - Arguments to update or create a LikeRes.
     * @example
     * // Update or create a LikeRes
     * const likeRes = await prisma.likeRes.upsert({
     *   create: {
     *     // ... data to create a LikeRes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LikeRes we want to update
     *   }
     * })
    **/
    upsert<T extends LikeResUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LikeResUpsertArgs<ExtArgs>>
    ): Prisma__LikeResClient<$Result.GetResult<Prisma.$LikeResPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LikeRes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeResCountArgs} args - Arguments to filter LikeRes to count.
     * @example
     * // Count the number of LikeRes
     * const count = await prisma.likeRes.count({
     *   where: {
     *     // ... the filter for the LikeRes we want to count
     *   }
     * })
    **/
    count<T extends LikeResCountArgs>(
      args?: Subset<T, LikeResCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeResCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LikeRes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeResAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeResAggregateArgs>(args: Subset<T, LikeResAggregateArgs>): Prisma.PrismaPromise<GetLikeResAggregateType<T>>

    /**
     * Group by LikeRes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeResGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeResGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeResGroupByArgs['orderBy'] }
        : { orderBy?: LikeResGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeResGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeResGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LikeRes model
   */
  readonly fields: LikeResFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LikeRes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikeResClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    restaurant<T extends RestaurantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RestaurantDefaultArgs<ExtArgs>>): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LikeRes model
   */ 
  interface LikeResFieldRefs {
    readonly user_id: FieldRef<"LikeRes", 'Int'>
    readonly res_id: FieldRef<"LikeRes", 'Int'>
    readonly date_like: FieldRef<"LikeRes", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * LikeRes findUnique
   */
  export type LikeResFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeRes
     */
    select?: LikeResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeResInclude<ExtArgs> | null
    /**
     * Filter, which LikeRes to fetch.
     */
    where: LikeResWhereUniqueInput
  }


  /**
   * LikeRes findUniqueOrThrow
   */
  export type LikeResFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeRes
     */
    select?: LikeResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeResInclude<ExtArgs> | null
    /**
     * Filter, which LikeRes to fetch.
     */
    where: LikeResWhereUniqueInput
  }


  /**
   * LikeRes findFirst
   */
  export type LikeResFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeRes
     */
    select?: LikeResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeResInclude<ExtArgs> | null
    /**
     * Filter, which LikeRes to fetch.
     */
    where?: LikeResWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeRes to fetch.
     */
    orderBy?: LikeResOrderByWithRelationInput | LikeResOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikeRes.
     */
    cursor?: LikeResWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeRes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeRes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikeRes.
     */
    distinct?: LikeResScalarFieldEnum | LikeResScalarFieldEnum[]
  }


  /**
   * LikeRes findFirstOrThrow
   */
  export type LikeResFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeRes
     */
    select?: LikeResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeResInclude<ExtArgs> | null
    /**
     * Filter, which LikeRes to fetch.
     */
    where?: LikeResWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeRes to fetch.
     */
    orderBy?: LikeResOrderByWithRelationInput | LikeResOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikeRes.
     */
    cursor?: LikeResWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeRes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeRes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikeRes.
     */
    distinct?: LikeResScalarFieldEnum | LikeResScalarFieldEnum[]
  }


  /**
   * LikeRes findMany
   */
  export type LikeResFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeRes
     */
    select?: LikeResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeResInclude<ExtArgs> | null
    /**
     * Filter, which LikeRes to fetch.
     */
    where?: LikeResWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeRes to fetch.
     */
    orderBy?: LikeResOrderByWithRelationInput | LikeResOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LikeRes.
     */
    cursor?: LikeResWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeRes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeRes.
     */
    skip?: number
    distinct?: LikeResScalarFieldEnum | LikeResScalarFieldEnum[]
  }


  /**
   * LikeRes create
   */
  export type LikeResCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeRes
     */
    select?: LikeResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeResInclude<ExtArgs> | null
    /**
     * The data needed to create a LikeRes.
     */
    data: XOR<LikeResCreateInput, LikeResUncheckedCreateInput>
  }


  /**
   * LikeRes createMany
   */
  export type LikeResCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LikeRes.
     */
    data: LikeResCreateManyInput | LikeResCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * LikeRes update
   */
  export type LikeResUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeRes
     */
    select?: LikeResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeResInclude<ExtArgs> | null
    /**
     * The data needed to update a LikeRes.
     */
    data: XOR<LikeResUpdateInput, LikeResUncheckedUpdateInput>
    /**
     * Choose, which LikeRes to update.
     */
    where: LikeResWhereUniqueInput
  }


  /**
   * LikeRes updateMany
   */
  export type LikeResUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LikeRes.
     */
    data: XOR<LikeResUpdateManyMutationInput, LikeResUncheckedUpdateManyInput>
    /**
     * Filter which LikeRes to update
     */
    where?: LikeResWhereInput
  }


  /**
   * LikeRes upsert
   */
  export type LikeResUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeRes
     */
    select?: LikeResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeResInclude<ExtArgs> | null
    /**
     * The filter to search for the LikeRes to update in case it exists.
     */
    where: LikeResWhereUniqueInput
    /**
     * In case the LikeRes found by the `where` argument doesn't exist, create a new LikeRes with this data.
     */
    create: XOR<LikeResCreateInput, LikeResUncheckedCreateInput>
    /**
     * In case the LikeRes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeResUpdateInput, LikeResUncheckedUpdateInput>
  }


  /**
   * LikeRes delete
   */
  export type LikeResDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeRes
     */
    select?: LikeResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeResInclude<ExtArgs> | null
    /**
     * Filter which LikeRes to delete.
     */
    where: LikeResWhereUniqueInput
  }


  /**
   * LikeRes deleteMany
   */
  export type LikeResDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which LikeRes to delete
     */
    where?: LikeResWhereInput
  }


  /**
   * LikeRes without action
   */
  export type LikeResDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeRes
     */
    select?: LikeResSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeResInclude<ExtArgs> | null
  }



  /**
   * Model FoodType
   */

  export type AggregateFoodType = {
    _count: FoodTypeCountAggregateOutputType | null
    _avg: FoodTypeAvgAggregateOutputType | null
    _sum: FoodTypeSumAggregateOutputType | null
    _min: FoodTypeMinAggregateOutputType | null
    _max: FoodTypeMaxAggregateOutputType | null
  }

  export type FoodTypeAvgAggregateOutputType = {
    type_id: number | null
  }

  export type FoodTypeSumAggregateOutputType = {
    type_id: number | null
  }

  export type FoodTypeMinAggregateOutputType = {
    type_id: number | null
    type_name: string | null
  }

  export type FoodTypeMaxAggregateOutputType = {
    type_id: number | null
    type_name: string | null
  }

  export type FoodTypeCountAggregateOutputType = {
    type_id: number
    type_name: number
    _all: number
  }


  export type FoodTypeAvgAggregateInputType = {
    type_id?: true
  }

  export type FoodTypeSumAggregateInputType = {
    type_id?: true
  }

  export type FoodTypeMinAggregateInputType = {
    type_id?: true
    type_name?: true
  }

  export type FoodTypeMaxAggregateInputType = {
    type_id?: true
    type_name?: true
  }

  export type FoodTypeCountAggregateInputType = {
    type_id?: true
    type_name?: true
    _all?: true
  }

  export type FoodTypeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodType to aggregate.
     */
    where?: FoodTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodTypes to fetch.
     */
    orderBy?: FoodTypeOrderByWithRelationInput | FoodTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodTypes
    **/
    _count?: true | FoodTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FoodTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FoodTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodTypeMaxAggregateInputType
  }

  export type GetFoodTypeAggregateType<T extends FoodTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodType[P]>
      : GetScalarType<T[P], AggregateFoodType[P]>
  }




  export type FoodTypeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FoodTypeWhereInput
    orderBy?: FoodTypeOrderByWithAggregationInput | FoodTypeOrderByWithAggregationInput[]
    by: FoodTypeScalarFieldEnum[] | FoodTypeScalarFieldEnum
    having?: FoodTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodTypeCountAggregateInputType | true
    _avg?: FoodTypeAvgAggregateInputType
    _sum?: FoodTypeSumAggregateInputType
    _min?: FoodTypeMinAggregateInputType
    _max?: FoodTypeMaxAggregateInputType
  }

  export type FoodTypeGroupByOutputType = {
    type_id: number
    type_name: string
    _count: FoodTypeCountAggregateOutputType | null
    _avg: FoodTypeAvgAggregateOutputType | null
    _sum: FoodTypeSumAggregateOutputType | null
    _min: FoodTypeMinAggregateOutputType | null
    _max: FoodTypeMaxAggregateOutputType | null
  }

  type GetFoodTypeGroupByPayload<T extends FoodTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodTypeGroupByOutputType[P]>
            : GetScalarType<T[P], FoodTypeGroupByOutputType[P]>
        }
      >
    >


  export type FoodTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    type_id?: boolean
    type_name?: boolean
    foods?: boolean | FoodType$foodsArgs<ExtArgs>
    _count?: boolean | FoodTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodType"]>

  export type FoodTypeSelectScalar = {
    type_id?: boolean
    type_name?: boolean
  }

  export type FoodTypeInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    foods?: boolean | FoodType$foodsArgs<ExtArgs>
    _count?: boolean | FoodTypeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $FoodTypePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "FoodType"
    objects: {
      foods: Prisma.$FoodPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      type_id: number
      type_name: string
    }, ExtArgs["result"]["foodType"]>
    composites: {}
  }


  type FoodTypeGetPayload<S extends boolean | null | undefined | FoodTypeDefaultArgs> = $Result.GetResult<Prisma.$FoodTypePayload, S>

  type FoodTypeCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FoodTypeFindManyArgs, 'select' | 'include'> & {
      select?: FoodTypeCountAggregateInputType | true
    }

  export interface FoodTypeDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FoodType'], meta: { name: 'FoodType' } }
    /**
     * Find zero or one FoodType that matches the filter.
     * @param {FoodTypeFindUniqueArgs} args - Arguments to find a FoodType
     * @example
     * // Get one FoodType
     * const foodType = await prisma.foodType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FoodTypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FoodTypeFindUniqueArgs<ExtArgs>>
    ): Prisma__FoodTypeClient<$Result.GetResult<Prisma.$FoodTypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FoodType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FoodTypeFindUniqueOrThrowArgs} args - Arguments to find a FoodType
     * @example
     * // Get one FoodType
     * const foodType = await prisma.foodType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FoodTypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodTypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FoodTypeClient<$Result.GetResult<Prisma.$FoodTypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FoodType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodTypeFindFirstArgs} args - Arguments to find a FoodType
     * @example
     * // Get one FoodType
     * const foodType = await prisma.foodType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FoodTypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodTypeFindFirstArgs<ExtArgs>>
    ): Prisma__FoodTypeClient<$Result.GetResult<Prisma.$FoodTypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FoodType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodTypeFindFirstOrThrowArgs} args - Arguments to find a FoodType
     * @example
     * // Get one FoodType
     * const foodType = await prisma.foodType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FoodTypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodTypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FoodTypeClient<$Result.GetResult<Prisma.$FoodTypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FoodTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodTypes
     * const foodTypes = await prisma.foodType.findMany()
     * 
     * // Get first 10 FoodTypes
     * const foodTypes = await prisma.foodType.findMany({ take: 10 })
     * 
     * // Only select the `type_id`
     * const foodTypeWithType_idOnly = await prisma.foodType.findMany({ select: { type_id: true } })
     * 
    **/
    findMany<T extends FoodTypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodTypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodTypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FoodType.
     * @param {FoodTypeCreateArgs} args - Arguments to create a FoodType.
     * @example
     * // Create one FoodType
     * const FoodType = await prisma.foodType.create({
     *   data: {
     *     // ... data to create a FoodType
     *   }
     * })
     * 
    **/
    create<T extends FoodTypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FoodTypeCreateArgs<ExtArgs>>
    ): Prisma__FoodTypeClient<$Result.GetResult<Prisma.$FoodTypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FoodTypes.
     *     @param {FoodTypeCreateManyArgs} args - Arguments to create many FoodTypes.
     *     @example
     *     // Create many FoodTypes
     *     const foodType = await prisma.foodType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FoodTypeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodTypeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FoodType.
     * @param {FoodTypeDeleteArgs} args - Arguments to delete one FoodType.
     * @example
     * // Delete one FoodType
     * const FoodType = await prisma.foodType.delete({
     *   where: {
     *     // ... filter to delete one FoodType
     *   }
     * })
     * 
    **/
    delete<T extends FoodTypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FoodTypeDeleteArgs<ExtArgs>>
    ): Prisma__FoodTypeClient<$Result.GetResult<Prisma.$FoodTypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FoodType.
     * @param {FoodTypeUpdateArgs} args - Arguments to update one FoodType.
     * @example
     * // Update one FoodType
     * const foodType = await prisma.foodType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FoodTypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FoodTypeUpdateArgs<ExtArgs>>
    ): Prisma__FoodTypeClient<$Result.GetResult<Prisma.$FoodTypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FoodTypes.
     * @param {FoodTypeDeleteManyArgs} args - Arguments to filter FoodTypes to delete.
     * @example
     * // Delete a few FoodTypes
     * const { count } = await prisma.foodType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FoodTypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodTypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodTypes
     * const foodType = await prisma.foodType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FoodTypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FoodTypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FoodType.
     * @param {FoodTypeUpsertArgs} args - Arguments to update or create a FoodType.
     * @example
     * // Update or create a FoodType
     * const foodType = await prisma.foodType.upsert({
     *   create: {
     *     // ... data to create a FoodType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodType we want to update
     *   }
     * })
    **/
    upsert<T extends FoodTypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FoodTypeUpsertArgs<ExtArgs>>
    ): Prisma__FoodTypeClient<$Result.GetResult<Prisma.$FoodTypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FoodTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodTypeCountArgs} args - Arguments to filter FoodTypes to count.
     * @example
     * // Count the number of FoodTypes
     * const count = await prisma.foodType.count({
     *   where: {
     *     // ... the filter for the FoodTypes we want to count
     *   }
     * })
    **/
    count<T extends FoodTypeCountArgs>(
      args?: Subset<T, FoodTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodTypeAggregateArgs>(args: Subset<T, FoodTypeAggregateArgs>): Prisma.PrismaPromise<GetFoodTypeAggregateType<T>>

    /**
     * Group by FoodType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodTypeGroupByArgs['orderBy'] }
        : { orderBy?: FoodTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FoodType model
   */
  readonly fields: FoodTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodTypeClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    foods<T extends FoodType$foodsArgs<ExtArgs> = {}>(args?: Subset<T, FoodType$foodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the FoodType model
   */ 
  interface FoodTypeFieldRefs {
    readonly type_id: FieldRef<"FoodType", 'Int'>
    readonly type_name: FieldRef<"FoodType", 'String'>
  }
    

  // Custom InputTypes

  /**
   * FoodType findUnique
   */
  export type FoodTypeFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodType
     */
    select?: FoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodTypeInclude<ExtArgs> | null
    /**
     * Filter, which FoodType to fetch.
     */
    where: FoodTypeWhereUniqueInput
  }


  /**
   * FoodType findUniqueOrThrow
   */
  export type FoodTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodType
     */
    select?: FoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodTypeInclude<ExtArgs> | null
    /**
     * Filter, which FoodType to fetch.
     */
    where: FoodTypeWhereUniqueInput
  }


  /**
   * FoodType findFirst
   */
  export type FoodTypeFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodType
     */
    select?: FoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodTypeInclude<ExtArgs> | null
    /**
     * Filter, which FoodType to fetch.
     */
    where?: FoodTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodTypes to fetch.
     */
    orderBy?: FoodTypeOrderByWithRelationInput | FoodTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodTypes.
     */
    cursor?: FoodTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodTypes.
     */
    distinct?: FoodTypeScalarFieldEnum | FoodTypeScalarFieldEnum[]
  }


  /**
   * FoodType findFirstOrThrow
   */
  export type FoodTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodType
     */
    select?: FoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodTypeInclude<ExtArgs> | null
    /**
     * Filter, which FoodType to fetch.
     */
    where?: FoodTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodTypes to fetch.
     */
    orderBy?: FoodTypeOrderByWithRelationInput | FoodTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodTypes.
     */
    cursor?: FoodTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodTypes.
     */
    distinct?: FoodTypeScalarFieldEnum | FoodTypeScalarFieldEnum[]
  }


  /**
   * FoodType findMany
   */
  export type FoodTypeFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodType
     */
    select?: FoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodTypeInclude<ExtArgs> | null
    /**
     * Filter, which FoodTypes to fetch.
     */
    where?: FoodTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodTypes to fetch.
     */
    orderBy?: FoodTypeOrderByWithRelationInput | FoodTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodTypes.
     */
    cursor?: FoodTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodTypes.
     */
    skip?: number
    distinct?: FoodTypeScalarFieldEnum | FoodTypeScalarFieldEnum[]
  }


  /**
   * FoodType create
   */
  export type FoodTypeCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodType
     */
    select?: FoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a FoodType.
     */
    data: XOR<FoodTypeCreateInput, FoodTypeUncheckedCreateInput>
  }


  /**
   * FoodType createMany
   */
  export type FoodTypeCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FoodTypes.
     */
    data: FoodTypeCreateManyInput | FoodTypeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * FoodType update
   */
  export type FoodTypeUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodType
     */
    select?: FoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a FoodType.
     */
    data: XOR<FoodTypeUpdateInput, FoodTypeUncheckedUpdateInput>
    /**
     * Choose, which FoodType to update.
     */
    where: FoodTypeWhereUniqueInput
  }


  /**
   * FoodType updateMany
   */
  export type FoodTypeUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FoodTypes.
     */
    data: XOR<FoodTypeUpdateManyMutationInput, FoodTypeUncheckedUpdateManyInput>
    /**
     * Filter which FoodTypes to update
     */
    where?: FoodTypeWhereInput
  }


  /**
   * FoodType upsert
   */
  export type FoodTypeUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodType
     */
    select?: FoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the FoodType to update in case it exists.
     */
    where: FoodTypeWhereUniqueInput
    /**
     * In case the FoodType found by the `where` argument doesn't exist, create a new FoodType with this data.
     */
    create: XOR<FoodTypeCreateInput, FoodTypeUncheckedCreateInput>
    /**
     * In case the FoodType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodTypeUpdateInput, FoodTypeUncheckedUpdateInput>
  }


  /**
   * FoodType delete
   */
  export type FoodTypeDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodType
     */
    select?: FoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodTypeInclude<ExtArgs> | null
    /**
     * Filter which FoodType to delete.
     */
    where: FoodTypeWhereUniqueInput
  }


  /**
   * FoodType deleteMany
   */
  export type FoodTypeDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodTypes to delete
     */
    where?: FoodTypeWhereInput
  }


  /**
   * FoodType.foods
   */
  export type FoodType$foodsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodInclude<ExtArgs> | null
    where?: FoodWhereInput
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    cursor?: FoodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }


  /**
   * FoodType without action
   */
  export type FoodTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodType
     */
    select?: FoodTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodTypeInclude<ExtArgs> | null
  }



  /**
   * Model Food
   */

  export type AggregateFood = {
    _count: FoodCountAggregateOutputType | null
    _avg: FoodAvgAggregateOutputType | null
    _sum: FoodSumAggregateOutputType | null
    _min: FoodMinAggregateOutputType | null
    _max: FoodMaxAggregateOutputType | null
  }

  export type FoodAvgAggregateOutputType = {
    food_id: number | null
    price: number | null
    type_id: number | null
  }

  export type FoodSumAggregateOutputType = {
    food_id: number | null
    price: number | null
    type_id: number | null
  }

  export type FoodMinAggregateOutputType = {
    food_id: number | null
    food_name: string | null
    image: string | null
    price: number | null
    description: string | null
    type_id: number | null
  }

  export type FoodMaxAggregateOutputType = {
    food_id: number | null
    food_name: string | null
    image: string | null
    price: number | null
    description: string | null
    type_id: number | null
  }

  export type FoodCountAggregateOutputType = {
    food_id: number
    food_name: number
    image: number
    price: number
    description: number
    type_id: number
    _all: number
  }


  export type FoodAvgAggregateInputType = {
    food_id?: true
    price?: true
    type_id?: true
  }

  export type FoodSumAggregateInputType = {
    food_id?: true
    price?: true
    type_id?: true
  }

  export type FoodMinAggregateInputType = {
    food_id?: true
    food_name?: true
    image?: true
    price?: true
    description?: true
    type_id?: true
  }

  export type FoodMaxAggregateInputType = {
    food_id?: true
    food_name?: true
    image?: true
    price?: true
    description?: true
    type_id?: true
  }

  export type FoodCountAggregateInputType = {
    food_id?: true
    food_name?: true
    image?: true
    price?: true
    description?: true
    type_id?: true
    _all?: true
  }

  export type FoodAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Food to aggregate.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Foods
    **/
    _count?: true | FoodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FoodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FoodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodMaxAggregateInputType
  }

  export type GetFoodAggregateType<T extends FoodAggregateArgs> = {
        [P in keyof T & keyof AggregateFood]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFood[P]>
      : GetScalarType<T[P], AggregateFood[P]>
  }




  export type FoodGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FoodWhereInput
    orderBy?: FoodOrderByWithAggregationInput | FoodOrderByWithAggregationInput[]
    by: FoodScalarFieldEnum[] | FoodScalarFieldEnum
    having?: FoodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodCountAggregateInputType | true
    _avg?: FoodAvgAggregateInputType
    _sum?: FoodSumAggregateInputType
    _min?: FoodMinAggregateInputType
    _max?: FoodMaxAggregateInputType
  }

  export type FoodGroupByOutputType = {
    food_id: number
    food_name: string
    image: string
    price: number
    description: string
    type_id: number
    _count: FoodCountAggregateOutputType | null
    _avg: FoodAvgAggregateOutputType | null
    _sum: FoodSumAggregateOutputType | null
    _min: FoodMinAggregateOutputType | null
    _max: FoodMaxAggregateOutputType | null
  }

  type GetFoodGroupByPayload<T extends FoodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodGroupByOutputType[P]>
            : GetScalarType<T[P], FoodGroupByOutputType[P]>
        }
      >
    >


  export type FoodSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    food_id?: boolean
    food_name?: boolean
    image?: boolean
    price?: boolean
    description?: boolean
    type_id?: boolean
    type?: boolean | FoodTypeDefaultArgs<ExtArgs>
    sub_foods?: boolean | Food$sub_foodsArgs<ExtArgs>
    order_tables?: boolean | Food$order_tablesArgs<ExtArgs>
    _count?: boolean | FoodCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["food"]>

  export type FoodSelectScalar = {
    food_id?: boolean
    food_name?: boolean
    image?: boolean
    price?: boolean
    description?: boolean
    type_id?: boolean
  }

  export type FoodInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    type?: boolean | FoodTypeDefaultArgs<ExtArgs>
    sub_foods?: boolean | Food$sub_foodsArgs<ExtArgs>
    order_tables?: boolean | Food$order_tablesArgs<ExtArgs>
    _count?: boolean | FoodCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $FoodPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Food"
    objects: {
      type: Prisma.$FoodTypePayload<ExtArgs>
      sub_foods: Prisma.$SubFoodPayload<ExtArgs>[]
      order_tables: Prisma.$OrderTablePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      food_id: number
      food_name: string
      image: string
      price: number
      description: string
      type_id: number
    }, ExtArgs["result"]["food"]>
    composites: {}
  }


  type FoodGetPayload<S extends boolean | null | undefined | FoodDefaultArgs> = $Result.GetResult<Prisma.$FoodPayload, S>

  type FoodCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FoodFindManyArgs, 'select' | 'include'> & {
      select?: FoodCountAggregateInputType | true
    }

  export interface FoodDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Food'], meta: { name: 'Food' } }
    /**
     * Find zero or one Food that matches the filter.
     * @param {FoodFindUniqueArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FoodFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FoodFindUniqueArgs<ExtArgs>>
    ): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Food that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FoodFindUniqueOrThrowArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FoodFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Food that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodFindFirstArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FoodFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodFindFirstArgs<ExtArgs>>
    ): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Food that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodFindFirstOrThrowArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FoodFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Foods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Foods
     * const foods = await prisma.food.findMany()
     * 
     * // Get first 10 Foods
     * const foods = await prisma.food.findMany({ take: 10 })
     * 
     * // Only select the `food_id`
     * const foodWithFood_idOnly = await prisma.food.findMany({ select: { food_id: true } })
     * 
    **/
    findMany<T extends FoodFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Food.
     * @param {FoodCreateArgs} args - Arguments to create a Food.
     * @example
     * // Create one Food
     * const Food = await prisma.food.create({
     *   data: {
     *     // ... data to create a Food
     *   }
     * })
     * 
    **/
    create<T extends FoodCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FoodCreateArgs<ExtArgs>>
    ): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Foods.
     *     @param {FoodCreateManyArgs} args - Arguments to create many Foods.
     *     @example
     *     // Create many Foods
     *     const food = await prisma.food.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FoodCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Food.
     * @param {FoodDeleteArgs} args - Arguments to delete one Food.
     * @example
     * // Delete one Food
     * const Food = await prisma.food.delete({
     *   where: {
     *     // ... filter to delete one Food
     *   }
     * })
     * 
    **/
    delete<T extends FoodDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FoodDeleteArgs<ExtArgs>>
    ): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Food.
     * @param {FoodUpdateArgs} args - Arguments to update one Food.
     * @example
     * // Update one Food
     * const food = await prisma.food.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FoodUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FoodUpdateArgs<ExtArgs>>
    ): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Foods.
     * @param {FoodDeleteManyArgs} args - Arguments to filter Foods to delete.
     * @example
     * // Delete a few Foods
     * const { count } = await prisma.food.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FoodDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Foods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Foods
     * const food = await prisma.food.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FoodUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FoodUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Food.
     * @param {FoodUpsertArgs} args - Arguments to update or create a Food.
     * @example
     * // Update or create a Food
     * const food = await prisma.food.upsert({
     *   create: {
     *     // ... data to create a Food
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Food we want to update
     *   }
     * })
    **/
    upsert<T extends FoodUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FoodUpsertArgs<ExtArgs>>
    ): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Foods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodCountArgs} args - Arguments to filter Foods to count.
     * @example
     * // Count the number of Foods
     * const count = await prisma.food.count({
     *   where: {
     *     // ... the filter for the Foods we want to count
     *   }
     * })
    **/
    count<T extends FoodCountArgs>(
      args?: Subset<T, FoodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Food.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodAggregateArgs>(args: Subset<T, FoodAggregateArgs>): Prisma.PrismaPromise<GetFoodAggregateType<T>>

    /**
     * Group by Food.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodGroupByArgs['orderBy'] }
        : { orderBy?: FoodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Food model
   */
  readonly fields: FoodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Food.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    type<T extends FoodTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoodTypeDefaultArgs<ExtArgs>>): Prisma__FoodTypeClient<$Result.GetResult<Prisma.$FoodTypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    sub_foods<T extends Food$sub_foodsArgs<ExtArgs> = {}>(args?: Subset<T, Food$sub_foodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubFoodPayload<ExtArgs>, T, 'findMany'> | Null>;

    order_tables<T extends Food$order_tablesArgs<ExtArgs> = {}>(args?: Subset<T, Food$order_tablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderTablePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Food model
   */ 
  interface FoodFieldRefs {
    readonly food_id: FieldRef<"Food", 'Int'>
    readonly food_name: FieldRef<"Food", 'String'>
    readonly image: FieldRef<"Food", 'String'>
    readonly price: FieldRef<"Food", 'Float'>
    readonly description: FieldRef<"Food", 'String'>
    readonly type_id: FieldRef<"Food", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Food findUnique
   */
  export type FoodFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where: FoodWhereUniqueInput
  }


  /**
   * Food findUniqueOrThrow
   */
  export type FoodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where: FoodWhereUniqueInput
  }


  /**
   * Food findFirst
   */
  export type FoodFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Foods.
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Foods.
     */
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }


  /**
   * Food findFirstOrThrow
   */
  export type FoodFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Foods.
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Foods.
     */
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }


  /**
   * Food findMany
   */
  export type FoodFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Foods to fetch.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Foods.
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }


  /**
   * Food create
   */
  export type FoodCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * The data needed to create a Food.
     */
    data: XOR<FoodCreateInput, FoodUncheckedCreateInput>
  }


  /**
   * Food createMany
   */
  export type FoodCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Foods.
     */
    data: FoodCreateManyInput | FoodCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Food update
   */
  export type FoodUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * The data needed to update a Food.
     */
    data: XOR<FoodUpdateInput, FoodUncheckedUpdateInput>
    /**
     * Choose, which Food to update.
     */
    where: FoodWhereUniqueInput
  }


  /**
   * Food updateMany
   */
  export type FoodUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Foods.
     */
    data: XOR<FoodUpdateManyMutationInput, FoodUncheckedUpdateManyInput>
    /**
     * Filter which Foods to update
     */
    where?: FoodWhereInput
  }


  /**
   * Food upsert
   */
  export type FoodUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * The filter to search for the Food to update in case it exists.
     */
    where: FoodWhereUniqueInput
    /**
     * In case the Food found by the `where` argument doesn't exist, create a new Food with this data.
     */
    create: XOR<FoodCreateInput, FoodUncheckedCreateInput>
    /**
     * In case the Food was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodUpdateInput, FoodUncheckedUpdateInput>
  }


  /**
   * Food delete
   */
  export type FoodDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter which Food to delete.
     */
    where: FoodWhereUniqueInput
  }


  /**
   * Food deleteMany
   */
  export type FoodDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Foods to delete
     */
    where?: FoodWhereInput
  }


  /**
   * Food.sub_foods
   */
  export type Food$sub_foodsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubFood
     */
    select?: SubFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubFoodInclude<ExtArgs> | null
    where?: SubFoodWhereInput
    orderBy?: SubFoodOrderByWithRelationInput | SubFoodOrderByWithRelationInput[]
    cursor?: SubFoodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubFoodScalarFieldEnum | SubFoodScalarFieldEnum[]
  }


  /**
   * Food.order_tables
   */
  export type Food$order_tablesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderTable
     */
    select?: OrderTableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderTableInclude<ExtArgs> | null
    where?: OrderTableWhereInput
    orderBy?: OrderTableOrderByWithRelationInput | OrderTableOrderByWithRelationInput[]
    cursor?: OrderTableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderTableScalarFieldEnum | OrderTableScalarFieldEnum[]
  }


  /**
   * Food without action
   */
  export type FoodDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FoodInclude<ExtArgs> | null
  }



  /**
   * Model OrderTable
   */

  export type AggregateOrderTable = {
    _count: OrderTableCountAggregateOutputType | null
    _avg: OrderTableAvgAggregateOutputType | null
    _sum: OrderTableSumAggregateOutputType | null
    _min: OrderTableMinAggregateOutputType | null
    _max: OrderTableMaxAggregateOutputType | null
  }

  export type OrderTableAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    food_id: number | null
    amount: number | null
  }

  export type OrderTableSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    food_id: number | null
    amount: number | null
  }

  export type OrderTableMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    food_id: number | null
    amount: number | null
    code: string | null
    arr_sub_id: string | null
  }

  export type OrderTableMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    food_id: number | null
    amount: number | null
    code: string | null
    arr_sub_id: string | null
  }

  export type OrderTableCountAggregateOutputType = {
    id: number
    user_id: number
    food_id: number
    amount: number
    code: number
    arr_sub_id: number
    _all: number
  }


  export type OrderTableAvgAggregateInputType = {
    id?: true
    user_id?: true
    food_id?: true
    amount?: true
  }

  export type OrderTableSumAggregateInputType = {
    id?: true
    user_id?: true
    food_id?: true
    amount?: true
  }

  export type OrderTableMinAggregateInputType = {
    id?: true
    user_id?: true
    food_id?: true
    amount?: true
    code?: true
    arr_sub_id?: true
  }

  export type OrderTableMaxAggregateInputType = {
    id?: true
    user_id?: true
    food_id?: true
    amount?: true
    code?: true
    arr_sub_id?: true
  }

  export type OrderTableCountAggregateInputType = {
    id?: true
    user_id?: true
    food_id?: true
    amount?: true
    code?: true
    arr_sub_id?: true
    _all?: true
  }

  export type OrderTableAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderTable to aggregate.
     */
    where?: OrderTableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderTables to fetch.
     */
    orderBy?: OrderTableOrderByWithRelationInput | OrderTableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderTableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderTables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderTables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderTables
    **/
    _count?: true | OrderTableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderTableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderTableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderTableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderTableMaxAggregateInputType
  }

  export type GetOrderTableAggregateType<T extends OrderTableAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderTable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderTable[P]>
      : GetScalarType<T[P], AggregateOrderTable[P]>
  }




  export type OrderTableGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OrderTableWhereInput
    orderBy?: OrderTableOrderByWithAggregationInput | OrderTableOrderByWithAggregationInput[]
    by: OrderTableScalarFieldEnum[] | OrderTableScalarFieldEnum
    having?: OrderTableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderTableCountAggregateInputType | true
    _avg?: OrderTableAvgAggregateInputType
    _sum?: OrderTableSumAggregateInputType
    _min?: OrderTableMinAggregateInputType
    _max?: OrderTableMaxAggregateInputType
  }

  export type OrderTableGroupByOutputType = {
    id: number
    user_id: number
    food_id: number
    amount: number
    code: string
    arr_sub_id: string | null
    _count: OrderTableCountAggregateOutputType | null
    _avg: OrderTableAvgAggregateOutputType | null
    _sum: OrderTableSumAggregateOutputType | null
    _min: OrderTableMinAggregateOutputType | null
    _max: OrderTableMaxAggregateOutputType | null
  }

  type GetOrderTableGroupByPayload<T extends OrderTableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderTableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderTableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderTableGroupByOutputType[P]>
            : GetScalarType<T[P], OrderTableGroupByOutputType[P]>
        }
      >
    >


  export type OrderTableSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    food_id?: boolean
    amount?: boolean
    code?: boolean
    arr_sub_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderTable"]>

  export type OrderTableSelectScalar = {
    id?: boolean
    user_id?: boolean
    food_id?: boolean
    amount?: boolean
    code?: boolean
    arr_sub_id?: boolean
  }

  export type OrderTableInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }


  export type $OrderTablePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "OrderTable"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      food: Prisma.$FoodPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      user_id: number
      food_id: number
      amount: number
      code: string
      arr_sub_id: string | null
    }, ExtArgs["result"]["orderTable"]>
    composites: {}
  }


  type OrderTableGetPayload<S extends boolean | null | undefined | OrderTableDefaultArgs> = $Result.GetResult<Prisma.$OrderTablePayload, S>

  type OrderTableCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<OrderTableFindManyArgs, 'select' | 'include'> & {
      select?: OrderTableCountAggregateInputType | true
    }

  export interface OrderTableDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderTable'], meta: { name: 'OrderTable' } }
    /**
     * Find zero or one OrderTable that matches the filter.
     * @param {OrderTableFindUniqueArgs} args - Arguments to find a OrderTable
     * @example
     * // Get one OrderTable
     * const orderTable = await prisma.orderTable.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderTableFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OrderTableFindUniqueArgs<ExtArgs>>
    ): Prisma__OrderTableClient<$Result.GetResult<Prisma.$OrderTablePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one OrderTable that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrderTableFindUniqueOrThrowArgs} args - Arguments to find a OrderTable
     * @example
     * // Get one OrderTable
     * const orderTable = await prisma.orderTable.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrderTableFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderTableFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrderTableClient<$Result.GetResult<Prisma.$OrderTablePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first OrderTable that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderTableFindFirstArgs} args - Arguments to find a OrderTable
     * @example
     * // Get one OrderTable
     * const orderTable = await prisma.orderTable.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderTableFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderTableFindFirstArgs<ExtArgs>>
    ): Prisma__OrderTableClient<$Result.GetResult<Prisma.$OrderTablePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first OrderTable that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderTableFindFirstOrThrowArgs} args - Arguments to find a OrderTable
     * @example
     * // Get one OrderTable
     * const orderTable = await prisma.orderTable.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrderTableFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderTableFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrderTableClient<$Result.GetResult<Prisma.$OrderTablePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more OrderTables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderTableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderTables
     * const orderTables = await prisma.orderTable.findMany()
     * 
     * // Get first 10 OrderTables
     * const orderTables = await prisma.orderTable.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderTableWithIdOnly = await prisma.orderTable.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrderTableFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderTableFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderTablePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a OrderTable.
     * @param {OrderTableCreateArgs} args - Arguments to create a OrderTable.
     * @example
     * // Create one OrderTable
     * const OrderTable = await prisma.orderTable.create({
     *   data: {
     *     // ... data to create a OrderTable
     *   }
     * })
     * 
    **/
    create<T extends OrderTableCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderTableCreateArgs<ExtArgs>>
    ): Prisma__OrderTableClient<$Result.GetResult<Prisma.$OrderTablePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many OrderTables.
     *     @param {OrderTableCreateManyArgs} args - Arguments to create many OrderTables.
     *     @example
     *     // Create many OrderTables
     *     const orderTable = await prisma.orderTable.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrderTableCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderTableCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OrderTable.
     * @param {OrderTableDeleteArgs} args - Arguments to delete one OrderTable.
     * @example
     * // Delete one OrderTable
     * const OrderTable = await prisma.orderTable.delete({
     *   where: {
     *     // ... filter to delete one OrderTable
     *   }
     * })
     * 
    **/
    delete<T extends OrderTableDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrderTableDeleteArgs<ExtArgs>>
    ): Prisma__OrderTableClient<$Result.GetResult<Prisma.$OrderTablePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one OrderTable.
     * @param {OrderTableUpdateArgs} args - Arguments to update one OrderTable.
     * @example
     * // Update one OrderTable
     * const orderTable = await prisma.orderTable.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderTableUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderTableUpdateArgs<ExtArgs>>
    ): Prisma__OrderTableClient<$Result.GetResult<Prisma.$OrderTablePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more OrderTables.
     * @param {OrderTableDeleteManyArgs} args - Arguments to filter OrderTables to delete.
     * @example
     * // Delete a few OrderTables
     * const { count } = await prisma.orderTable.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderTableDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderTableDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderTables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderTableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderTables
     * const orderTable = await prisma.orderTable.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderTableUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrderTableUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderTable.
     * @param {OrderTableUpsertArgs} args - Arguments to update or create a OrderTable.
     * @example
     * // Update or create a OrderTable
     * const orderTable = await prisma.orderTable.upsert({
     *   create: {
     *     // ... data to create a OrderTable
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderTable we want to update
     *   }
     * })
    **/
    upsert<T extends OrderTableUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrderTableUpsertArgs<ExtArgs>>
    ): Prisma__OrderTableClient<$Result.GetResult<Prisma.$OrderTablePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of OrderTables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderTableCountArgs} args - Arguments to filter OrderTables to count.
     * @example
     * // Count the number of OrderTables
     * const count = await prisma.orderTable.count({
     *   where: {
     *     // ... the filter for the OrderTables we want to count
     *   }
     * })
    **/
    count<T extends OrderTableCountArgs>(
      args?: Subset<T, OrderTableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderTableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderTable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderTableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderTableAggregateArgs>(args: Subset<T, OrderTableAggregateArgs>): Prisma.PrismaPromise<GetOrderTableAggregateType<T>>

    /**
     * Group by OrderTable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderTableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderTableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderTableGroupByArgs['orderBy'] }
        : { orderBy?: OrderTableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderTableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderTableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderTable model
   */
  readonly fields: OrderTableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderTable.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderTableClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    food<T extends FoodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoodDefaultArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the OrderTable model
   */ 
  interface OrderTableFieldRefs {
    readonly id: FieldRef<"OrderTable", 'Int'>
    readonly user_id: FieldRef<"OrderTable", 'Int'>
    readonly food_id: FieldRef<"OrderTable", 'Int'>
    readonly amount: FieldRef<"OrderTable", 'Int'>
    readonly code: FieldRef<"OrderTable", 'String'>
    readonly arr_sub_id: FieldRef<"OrderTable", 'String'>
  }
    

  // Custom InputTypes

  /**
   * OrderTable findUnique
   */
  export type OrderTableFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderTable
     */
    select?: OrderTableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderTableInclude<ExtArgs> | null
    /**
     * Filter, which OrderTable to fetch.
     */
    where: OrderTableWhereUniqueInput
  }


  /**
   * OrderTable findUniqueOrThrow
   */
  export type OrderTableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderTable
     */
    select?: OrderTableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderTableInclude<ExtArgs> | null
    /**
     * Filter, which OrderTable to fetch.
     */
    where: OrderTableWhereUniqueInput
  }


  /**
   * OrderTable findFirst
   */
  export type OrderTableFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderTable
     */
    select?: OrderTableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderTableInclude<ExtArgs> | null
    /**
     * Filter, which OrderTable to fetch.
     */
    where?: OrderTableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderTables to fetch.
     */
    orderBy?: OrderTableOrderByWithRelationInput | OrderTableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderTables.
     */
    cursor?: OrderTableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderTables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderTables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderTables.
     */
    distinct?: OrderTableScalarFieldEnum | OrderTableScalarFieldEnum[]
  }


  /**
   * OrderTable findFirstOrThrow
   */
  export type OrderTableFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderTable
     */
    select?: OrderTableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderTableInclude<ExtArgs> | null
    /**
     * Filter, which OrderTable to fetch.
     */
    where?: OrderTableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderTables to fetch.
     */
    orderBy?: OrderTableOrderByWithRelationInput | OrderTableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderTables.
     */
    cursor?: OrderTableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderTables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderTables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderTables.
     */
    distinct?: OrderTableScalarFieldEnum | OrderTableScalarFieldEnum[]
  }


  /**
   * OrderTable findMany
   */
  export type OrderTableFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderTable
     */
    select?: OrderTableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderTableInclude<ExtArgs> | null
    /**
     * Filter, which OrderTables to fetch.
     */
    where?: OrderTableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderTables to fetch.
     */
    orderBy?: OrderTableOrderByWithRelationInput | OrderTableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderTables.
     */
    cursor?: OrderTableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderTables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderTables.
     */
    skip?: number
    distinct?: OrderTableScalarFieldEnum | OrderTableScalarFieldEnum[]
  }


  /**
   * OrderTable create
   */
  export type OrderTableCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderTable
     */
    select?: OrderTableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderTableInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderTable.
     */
    data: XOR<OrderTableCreateInput, OrderTableUncheckedCreateInput>
  }


  /**
   * OrderTable createMany
   */
  export type OrderTableCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderTables.
     */
    data: OrderTableCreateManyInput | OrderTableCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * OrderTable update
   */
  export type OrderTableUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderTable
     */
    select?: OrderTableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderTableInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderTable.
     */
    data: XOR<OrderTableUpdateInput, OrderTableUncheckedUpdateInput>
    /**
     * Choose, which OrderTable to update.
     */
    where: OrderTableWhereUniqueInput
  }


  /**
   * OrderTable updateMany
   */
  export type OrderTableUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderTables.
     */
    data: XOR<OrderTableUpdateManyMutationInput, OrderTableUncheckedUpdateManyInput>
    /**
     * Filter which OrderTables to update
     */
    where?: OrderTableWhereInput
  }


  /**
   * OrderTable upsert
   */
  export type OrderTableUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderTable
     */
    select?: OrderTableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderTableInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderTable to update in case it exists.
     */
    where: OrderTableWhereUniqueInput
    /**
     * In case the OrderTable found by the `where` argument doesn't exist, create a new OrderTable with this data.
     */
    create: XOR<OrderTableCreateInput, OrderTableUncheckedCreateInput>
    /**
     * In case the OrderTable was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderTableUpdateInput, OrderTableUncheckedUpdateInput>
  }


  /**
   * OrderTable delete
   */
  export type OrderTableDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderTable
     */
    select?: OrderTableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderTableInclude<ExtArgs> | null
    /**
     * Filter which OrderTable to delete.
     */
    where: OrderTableWhereUniqueInput
  }


  /**
   * OrderTable deleteMany
   */
  export type OrderTableDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderTables to delete
     */
    where?: OrderTableWhereInput
  }


  /**
   * OrderTable without action
   */
  export type OrderTableDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderTable
     */
    select?: OrderTableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderTableInclude<ExtArgs> | null
  }



  /**
   * Model SubFood
   */

  export type AggregateSubFood = {
    _count: SubFoodCountAggregateOutputType | null
    _avg: SubFoodAvgAggregateOutputType | null
    _sum: SubFoodSumAggregateOutputType | null
    _min: SubFoodMinAggregateOutputType | null
    _max: SubFoodMaxAggregateOutputType | null
  }

  export type SubFoodAvgAggregateOutputType = {
    sub_id: number | null
    sub_price: number | null
    food_id: number | null
  }

  export type SubFoodSumAggregateOutputType = {
    sub_id: number | null
    sub_price: number | null
    food_id: number | null
  }

  export type SubFoodMinAggregateOutputType = {
    sub_id: number | null
    sub_name: string | null
    sub_price: number | null
    food_id: number | null
  }

  export type SubFoodMaxAggregateOutputType = {
    sub_id: number | null
    sub_name: string | null
    sub_price: number | null
    food_id: number | null
  }

  export type SubFoodCountAggregateOutputType = {
    sub_id: number
    sub_name: number
    sub_price: number
    food_id: number
    _all: number
  }


  export type SubFoodAvgAggregateInputType = {
    sub_id?: true
    sub_price?: true
    food_id?: true
  }

  export type SubFoodSumAggregateInputType = {
    sub_id?: true
    sub_price?: true
    food_id?: true
  }

  export type SubFoodMinAggregateInputType = {
    sub_id?: true
    sub_name?: true
    sub_price?: true
    food_id?: true
  }

  export type SubFoodMaxAggregateInputType = {
    sub_id?: true
    sub_name?: true
    sub_price?: true
    food_id?: true
  }

  export type SubFoodCountAggregateInputType = {
    sub_id?: true
    sub_name?: true
    sub_price?: true
    food_id?: true
    _all?: true
  }

  export type SubFoodAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubFood to aggregate.
     */
    where?: SubFoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubFoods to fetch.
     */
    orderBy?: SubFoodOrderByWithRelationInput | SubFoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubFoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubFoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubFoods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubFoods
    **/
    _count?: true | SubFoodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubFoodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubFoodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubFoodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubFoodMaxAggregateInputType
  }

  export type GetSubFoodAggregateType<T extends SubFoodAggregateArgs> = {
        [P in keyof T & keyof AggregateSubFood]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubFood[P]>
      : GetScalarType<T[P], AggregateSubFood[P]>
  }




  export type SubFoodGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SubFoodWhereInput
    orderBy?: SubFoodOrderByWithAggregationInput | SubFoodOrderByWithAggregationInput[]
    by: SubFoodScalarFieldEnum[] | SubFoodScalarFieldEnum
    having?: SubFoodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubFoodCountAggregateInputType | true
    _avg?: SubFoodAvgAggregateInputType
    _sum?: SubFoodSumAggregateInputType
    _min?: SubFoodMinAggregateInputType
    _max?: SubFoodMaxAggregateInputType
  }

  export type SubFoodGroupByOutputType = {
    sub_id: number
    sub_name: string
    sub_price: number
    food_id: number
    _count: SubFoodCountAggregateOutputType | null
    _avg: SubFoodAvgAggregateOutputType | null
    _sum: SubFoodSumAggregateOutputType | null
    _min: SubFoodMinAggregateOutputType | null
    _max: SubFoodMaxAggregateOutputType | null
  }

  type GetSubFoodGroupByPayload<T extends SubFoodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubFoodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubFoodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubFoodGroupByOutputType[P]>
            : GetScalarType<T[P], SubFoodGroupByOutputType[P]>
        }
      >
    >


  export type SubFoodSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sub_id?: boolean
    sub_name?: boolean
    sub_price?: boolean
    food_id?: boolean
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subFood"]>

  export type SubFoodSelectScalar = {
    sub_id?: boolean
    sub_name?: boolean
    sub_price?: boolean
    food_id?: boolean
  }

  export type SubFoodInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }


  export type $SubFoodPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "SubFood"
    objects: {
      food: Prisma.$FoodPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      sub_id: number
      sub_name: string
      sub_price: number
      food_id: number
    }, ExtArgs["result"]["subFood"]>
    composites: {}
  }


  type SubFoodGetPayload<S extends boolean | null | undefined | SubFoodDefaultArgs> = $Result.GetResult<Prisma.$SubFoodPayload, S>

  type SubFoodCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SubFoodFindManyArgs, 'select' | 'include'> & {
      select?: SubFoodCountAggregateInputType | true
    }

  export interface SubFoodDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubFood'], meta: { name: 'SubFood' } }
    /**
     * Find zero or one SubFood that matches the filter.
     * @param {SubFoodFindUniqueArgs} args - Arguments to find a SubFood
     * @example
     * // Get one SubFood
     * const subFood = await prisma.subFood.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubFoodFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubFoodFindUniqueArgs<ExtArgs>>
    ): Prisma__SubFoodClient<$Result.GetResult<Prisma.$SubFoodPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SubFood that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubFoodFindUniqueOrThrowArgs} args - Arguments to find a SubFood
     * @example
     * // Get one SubFood
     * const subFood = await prisma.subFood.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubFoodFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubFoodFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubFoodClient<$Result.GetResult<Prisma.$SubFoodPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SubFood that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubFoodFindFirstArgs} args - Arguments to find a SubFood
     * @example
     * // Get one SubFood
     * const subFood = await prisma.subFood.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubFoodFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubFoodFindFirstArgs<ExtArgs>>
    ): Prisma__SubFoodClient<$Result.GetResult<Prisma.$SubFoodPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SubFood that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubFoodFindFirstOrThrowArgs} args - Arguments to find a SubFood
     * @example
     * // Get one SubFood
     * const subFood = await prisma.subFood.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubFoodFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubFoodFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubFoodClient<$Result.GetResult<Prisma.$SubFoodPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SubFoods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubFoodFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubFoods
     * const subFoods = await prisma.subFood.findMany()
     * 
     * // Get first 10 SubFoods
     * const subFoods = await prisma.subFood.findMany({ take: 10 })
     * 
     * // Only select the `sub_id`
     * const subFoodWithSub_idOnly = await prisma.subFood.findMany({ select: { sub_id: true } })
     * 
    **/
    findMany<T extends SubFoodFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubFoodFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubFoodPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SubFood.
     * @param {SubFoodCreateArgs} args - Arguments to create a SubFood.
     * @example
     * // Create one SubFood
     * const SubFood = await prisma.subFood.create({
     *   data: {
     *     // ... data to create a SubFood
     *   }
     * })
     * 
    **/
    create<T extends SubFoodCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubFoodCreateArgs<ExtArgs>>
    ): Prisma__SubFoodClient<$Result.GetResult<Prisma.$SubFoodPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SubFoods.
     *     @param {SubFoodCreateManyArgs} args - Arguments to create many SubFoods.
     *     @example
     *     // Create many SubFoods
     *     const subFood = await prisma.subFood.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubFoodCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubFoodCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SubFood.
     * @param {SubFoodDeleteArgs} args - Arguments to delete one SubFood.
     * @example
     * // Delete one SubFood
     * const SubFood = await prisma.subFood.delete({
     *   where: {
     *     // ... filter to delete one SubFood
     *   }
     * })
     * 
    **/
    delete<T extends SubFoodDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubFoodDeleteArgs<ExtArgs>>
    ): Prisma__SubFoodClient<$Result.GetResult<Prisma.$SubFoodPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SubFood.
     * @param {SubFoodUpdateArgs} args - Arguments to update one SubFood.
     * @example
     * // Update one SubFood
     * const subFood = await prisma.subFood.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubFoodUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubFoodUpdateArgs<ExtArgs>>
    ): Prisma__SubFoodClient<$Result.GetResult<Prisma.$SubFoodPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SubFoods.
     * @param {SubFoodDeleteManyArgs} args - Arguments to filter SubFoods to delete.
     * @example
     * // Delete a few SubFoods
     * const { count } = await prisma.subFood.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubFoodDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubFoodDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubFoods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubFoodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubFoods
     * const subFood = await prisma.subFood.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubFoodUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubFoodUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SubFood.
     * @param {SubFoodUpsertArgs} args - Arguments to update or create a SubFood.
     * @example
     * // Update or create a SubFood
     * const subFood = await prisma.subFood.upsert({
     *   create: {
     *     // ... data to create a SubFood
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubFood we want to update
     *   }
     * })
    **/
    upsert<T extends SubFoodUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubFoodUpsertArgs<ExtArgs>>
    ): Prisma__SubFoodClient<$Result.GetResult<Prisma.$SubFoodPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SubFoods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubFoodCountArgs} args - Arguments to filter SubFoods to count.
     * @example
     * // Count the number of SubFoods
     * const count = await prisma.subFood.count({
     *   where: {
     *     // ... the filter for the SubFoods we want to count
     *   }
     * })
    **/
    count<T extends SubFoodCountArgs>(
      args?: Subset<T, SubFoodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubFoodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubFood.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubFoodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubFoodAggregateArgs>(args: Subset<T, SubFoodAggregateArgs>): Prisma.PrismaPromise<GetSubFoodAggregateType<T>>

    /**
     * Group by SubFood.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubFoodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubFoodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubFoodGroupByArgs['orderBy'] }
        : { orderBy?: SubFoodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubFoodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubFoodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubFood model
   */
  readonly fields: SubFoodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubFood.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubFoodClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    food<T extends FoodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoodDefaultArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SubFood model
   */ 
  interface SubFoodFieldRefs {
    readonly sub_id: FieldRef<"SubFood", 'Int'>
    readonly sub_name: FieldRef<"SubFood", 'String'>
    readonly sub_price: FieldRef<"SubFood", 'Float'>
    readonly food_id: FieldRef<"SubFood", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * SubFood findUnique
   */
  export type SubFoodFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubFood
     */
    select?: SubFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubFoodInclude<ExtArgs> | null
    /**
     * Filter, which SubFood to fetch.
     */
    where: SubFoodWhereUniqueInput
  }


  /**
   * SubFood findUniqueOrThrow
   */
  export type SubFoodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubFood
     */
    select?: SubFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubFoodInclude<ExtArgs> | null
    /**
     * Filter, which SubFood to fetch.
     */
    where: SubFoodWhereUniqueInput
  }


  /**
   * SubFood findFirst
   */
  export type SubFoodFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubFood
     */
    select?: SubFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubFoodInclude<ExtArgs> | null
    /**
     * Filter, which SubFood to fetch.
     */
    where?: SubFoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubFoods to fetch.
     */
    orderBy?: SubFoodOrderByWithRelationInput | SubFoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubFoods.
     */
    cursor?: SubFoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubFoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubFoods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubFoods.
     */
    distinct?: SubFoodScalarFieldEnum | SubFoodScalarFieldEnum[]
  }


  /**
   * SubFood findFirstOrThrow
   */
  export type SubFoodFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubFood
     */
    select?: SubFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubFoodInclude<ExtArgs> | null
    /**
     * Filter, which SubFood to fetch.
     */
    where?: SubFoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubFoods to fetch.
     */
    orderBy?: SubFoodOrderByWithRelationInput | SubFoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubFoods.
     */
    cursor?: SubFoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubFoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubFoods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubFoods.
     */
    distinct?: SubFoodScalarFieldEnum | SubFoodScalarFieldEnum[]
  }


  /**
   * SubFood findMany
   */
  export type SubFoodFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubFood
     */
    select?: SubFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubFoodInclude<ExtArgs> | null
    /**
     * Filter, which SubFoods to fetch.
     */
    where?: SubFoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubFoods to fetch.
     */
    orderBy?: SubFoodOrderByWithRelationInput | SubFoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubFoods.
     */
    cursor?: SubFoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubFoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubFoods.
     */
    skip?: number
    distinct?: SubFoodScalarFieldEnum | SubFoodScalarFieldEnum[]
  }


  /**
   * SubFood create
   */
  export type SubFoodCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubFood
     */
    select?: SubFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubFoodInclude<ExtArgs> | null
    /**
     * The data needed to create a SubFood.
     */
    data: XOR<SubFoodCreateInput, SubFoodUncheckedCreateInput>
  }


  /**
   * SubFood createMany
   */
  export type SubFoodCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubFoods.
     */
    data: SubFoodCreateManyInput | SubFoodCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SubFood update
   */
  export type SubFoodUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubFood
     */
    select?: SubFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubFoodInclude<ExtArgs> | null
    /**
     * The data needed to update a SubFood.
     */
    data: XOR<SubFoodUpdateInput, SubFoodUncheckedUpdateInput>
    /**
     * Choose, which SubFood to update.
     */
    where: SubFoodWhereUniqueInput
  }


  /**
   * SubFood updateMany
   */
  export type SubFoodUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubFoods.
     */
    data: XOR<SubFoodUpdateManyMutationInput, SubFoodUncheckedUpdateManyInput>
    /**
     * Filter which SubFoods to update
     */
    where?: SubFoodWhereInput
  }


  /**
   * SubFood upsert
   */
  export type SubFoodUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubFood
     */
    select?: SubFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubFoodInclude<ExtArgs> | null
    /**
     * The filter to search for the SubFood to update in case it exists.
     */
    where: SubFoodWhereUniqueInput
    /**
     * In case the SubFood found by the `where` argument doesn't exist, create a new SubFood with this data.
     */
    create: XOR<SubFoodCreateInput, SubFoodUncheckedCreateInput>
    /**
     * In case the SubFood was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubFoodUpdateInput, SubFoodUncheckedUpdateInput>
  }


  /**
   * SubFood delete
   */
  export type SubFoodDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubFood
     */
    select?: SubFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubFoodInclude<ExtArgs> | null
    /**
     * Filter which SubFood to delete.
     */
    where: SubFoodWhereUniqueInput
  }


  /**
   * SubFood deleteMany
   */
  export type SubFoodDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubFoods to delete
     */
    where?: SubFoodWhereInput
  }


  /**
   * SubFood without action
   */
  export type SubFoodDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubFood
     */
    select?: SubFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubFoodInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    full_name: 'full_name',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RateResScalarFieldEnum: {
    user_id: 'user_id',
    res_id: 'res_id',
    amount: 'amount',
    date_rate: 'date_rate'
  };

  export type RateResScalarFieldEnum = (typeof RateResScalarFieldEnum)[keyof typeof RateResScalarFieldEnum]


  export const RestaurantScalarFieldEnum: {
    res_id: 'res_id',
    res_name: 'res_name',
    image: 'image',
    description: 'description'
  };

  export type RestaurantScalarFieldEnum = (typeof RestaurantScalarFieldEnum)[keyof typeof RestaurantScalarFieldEnum]


  export const LikeResScalarFieldEnum: {
    user_id: 'user_id',
    res_id: 'res_id',
    date_like: 'date_like'
  };

  export type LikeResScalarFieldEnum = (typeof LikeResScalarFieldEnum)[keyof typeof LikeResScalarFieldEnum]


  export const FoodTypeScalarFieldEnum: {
    type_id: 'type_id',
    type_name: 'type_name'
  };

  export type FoodTypeScalarFieldEnum = (typeof FoodTypeScalarFieldEnum)[keyof typeof FoodTypeScalarFieldEnum]


  export const FoodScalarFieldEnum: {
    food_id: 'food_id',
    food_name: 'food_name',
    image: 'image',
    price: 'price',
    description: 'description',
    type_id: 'type_id'
  };

  export type FoodScalarFieldEnum = (typeof FoodScalarFieldEnum)[keyof typeof FoodScalarFieldEnum]


  export const OrderTableScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    food_id: 'food_id',
    amount: 'amount',
    code: 'code',
    arr_sub_id: 'arr_sub_id'
  };

  export type OrderTableScalarFieldEnum = (typeof OrderTableScalarFieldEnum)[keyof typeof OrderTableScalarFieldEnum]


  export const SubFoodScalarFieldEnum: {
    sub_id: 'sub_id',
    sub_name: 'sub_name',
    sub_price: 'sub_price',
    food_id: 'food_id'
  };

  export type SubFoodScalarFieldEnum = (typeof SubFoodScalarFieldEnum)[keyof typeof SubFoodScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_id?: IntFilter<"User"> | number
    full_name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    rate_res?: RateResListRelationFilter
    like_res?: LikeResListRelationFilter
    order_table?: OrderTableListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    user_id?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    rate_res?: RateResOrderByRelationAggregateInput
    like_res?: LikeResOrderByRelationAggregateInput
    order_table?: OrderTableOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    full_name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    rate_res?: RateResListRelationFilter
    like_res?: LikeResListRelationFilter
    order_table?: OrderTableListRelationFilter
  }, "user_id">

  export type UserOrderByWithAggregationInput = {
    user_id?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"User"> | number
    full_name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type RateResWhereInput = {
    AND?: RateResWhereInput | RateResWhereInput[]
    OR?: RateResWhereInput[]
    NOT?: RateResWhereInput | RateResWhereInput[]
    user_id?: IntFilter<"RateRes"> | number
    res_id?: IntFilter<"RateRes"> | number
    amount?: IntFilter<"RateRes"> | number
    date_rate?: DateTimeFilter<"RateRes"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    restaurant?: XOR<RestaurantRelationFilter, RestaurantWhereInput>
  }

  export type RateResOrderByWithRelationInput = {
    user_id?: SortOrder
    res_id?: SortOrder
    amount?: SortOrder
    date_rate?: SortOrder
    user?: UserOrderByWithRelationInput
    restaurant?: RestaurantOrderByWithRelationInput
  }

  export type RateResWhereUniqueInput = Prisma.AtLeast<{
    user_id_res_id_amount?: RateResUser_idRes_idAmountCompoundUniqueInput
    user_id_res_id?: RateResUser_idRes_idCompoundUniqueInput
    AND?: RateResWhereInput | RateResWhereInput[]
    OR?: RateResWhereInput[]
    NOT?: RateResWhereInput | RateResWhereInput[]
    user_id?: IntFilter<"RateRes"> | number
    res_id?: IntFilter<"RateRes"> | number
    amount?: IntFilter<"RateRes"> | number
    date_rate?: DateTimeFilter<"RateRes"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    restaurant?: XOR<RestaurantRelationFilter, RestaurantWhereInput>
  }, "user_id_res_id" | "user_id_res_id_amount">

  export type RateResOrderByWithAggregationInput = {
    user_id?: SortOrder
    res_id?: SortOrder
    amount?: SortOrder
    date_rate?: SortOrder
    _count?: RateResCountOrderByAggregateInput
    _avg?: RateResAvgOrderByAggregateInput
    _max?: RateResMaxOrderByAggregateInput
    _min?: RateResMinOrderByAggregateInput
    _sum?: RateResSumOrderByAggregateInput
  }

  export type RateResScalarWhereWithAggregatesInput = {
    AND?: RateResScalarWhereWithAggregatesInput | RateResScalarWhereWithAggregatesInput[]
    OR?: RateResScalarWhereWithAggregatesInput[]
    NOT?: RateResScalarWhereWithAggregatesInput | RateResScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"RateRes"> | number
    res_id?: IntWithAggregatesFilter<"RateRes"> | number
    amount?: IntWithAggregatesFilter<"RateRes"> | number
    date_rate?: DateTimeWithAggregatesFilter<"RateRes"> | Date | string
  }

  export type RestaurantWhereInput = {
    AND?: RestaurantWhereInput | RestaurantWhereInput[]
    OR?: RestaurantWhereInput[]
    NOT?: RestaurantWhereInput | RestaurantWhereInput[]
    res_id?: IntFilter<"Restaurant"> | number
    res_name?: StringFilter<"Restaurant"> | string
    image?: StringFilter<"Restaurant"> | string
    description?: StringFilter<"Restaurant"> | string
    rate_res?: RateResListRelationFilter
    like_res?: LikeResListRelationFilter
  }

  export type RestaurantOrderByWithRelationInput = {
    res_id?: SortOrder
    res_name?: SortOrder
    image?: SortOrder
    description?: SortOrder
    rate_res?: RateResOrderByRelationAggregateInput
    like_res?: LikeResOrderByRelationAggregateInput
  }

  export type RestaurantWhereUniqueInput = Prisma.AtLeast<{
    res_id?: number
    AND?: RestaurantWhereInput | RestaurantWhereInput[]
    OR?: RestaurantWhereInput[]
    NOT?: RestaurantWhereInput | RestaurantWhereInput[]
    res_name?: StringFilter<"Restaurant"> | string
    image?: StringFilter<"Restaurant"> | string
    description?: StringFilter<"Restaurant"> | string
    rate_res?: RateResListRelationFilter
    like_res?: LikeResListRelationFilter
  }, "res_id">

  export type RestaurantOrderByWithAggregationInput = {
    res_id?: SortOrder
    res_name?: SortOrder
    image?: SortOrder
    description?: SortOrder
    _count?: RestaurantCountOrderByAggregateInput
    _avg?: RestaurantAvgOrderByAggregateInput
    _max?: RestaurantMaxOrderByAggregateInput
    _min?: RestaurantMinOrderByAggregateInput
    _sum?: RestaurantSumOrderByAggregateInput
  }

  export type RestaurantScalarWhereWithAggregatesInput = {
    AND?: RestaurantScalarWhereWithAggregatesInput | RestaurantScalarWhereWithAggregatesInput[]
    OR?: RestaurantScalarWhereWithAggregatesInput[]
    NOT?: RestaurantScalarWhereWithAggregatesInput | RestaurantScalarWhereWithAggregatesInput[]
    res_id?: IntWithAggregatesFilter<"Restaurant"> | number
    res_name?: StringWithAggregatesFilter<"Restaurant"> | string
    image?: StringWithAggregatesFilter<"Restaurant"> | string
    description?: StringWithAggregatesFilter<"Restaurant"> | string
  }

  export type LikeResWhereInput = {
    AND?: LikeResWhereInput | LikeResWhereInput[]
    OR?: LikeResWhereInput[]
    NOT?: LikeResWhereInput | LikeResWhereInput[]
    user_id?: IntFilter<"LikeRes"> | number
    res_id?: IntFilter<"LikeRes"> | number
    date_like?: DateTimeFilter<"LikeRes"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    restaurant?: XOR<RestaurantRelationFilter, RestaurantWhereInput>
  }

  export type LikeResOrderByWithRelationInput = {
    user_id?: SortOrder
    res_id?: SortOrder
    date_like?: SortOrder
    user?: UserOrderByWithRelationInput
    restaurant?: RestaurantOrderByWithRelationInput
  }

  export type LikeResWhereUniqueInput = Prisma.AtLeast<{
    user_id_res_id_date_like?: LikeResUser_idRes_idDate_likeCompoundUniqueInput
    AND?: LikeResWhereInput | LikeResWhereInput[]
    OR?: LikeResWhereInput[]
    NOT?: LikeResWhereInput | LikeResWhereInput[]
    user_id?: IntFilter<"LikeRes"> | number
    res_id?: IntFilter<"LikeRes"> | number
    date_like?: DateTimeFilter<"LikeRes"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    restaurant?: XOR<RestaurantRelationFilter, RestaurantWhereInput>
  }, "user_id_res_id_date_like">

  export type LikeResOrderByWithAggregationInput = {
    user_id?: SortOrder
    res_id?: SortOrder
    date_like?: SortOrder
    _count?: LikeResCountOrderByAggregateInput
    _avg?: LikeResAvgOrderByAggregateInput
    _max?: LikeResMaxOrderByAggregateInput
    _min?: LikeResMinOrderByAggregateInput
    _sum?: LikeResSumOrderByAggregateInput
  }

  export type LikeResScalarWhereWithAggregatesInput = {
    AND?: LikeResScalarWhereWithAggregatesInput | LikeResScalarWhereWithAggregatesInput[]
    OR?: LikeResScalarWhereWithAggregatesInput[]
    NOT?: LikeResScalarWhereWithAggregatesInput | LikeResScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"LikeRes"> | number
    res_id?: IntWithAggregatesFilter<"LikeRes"> | number
    date_like?: DateTimeWithAggregatesFilter<"LikeRes"> | Date | string
  }

  export type FoodTypeWhereInput = {
    AND?: FoodTypeWhereInput | FoodTypeWhereInput[]
    OR?: FoodTypeWhereInput[]
    NOT?: FoodTypeWhereInput | FoodTypeWhereInput[]
    type_id?: IntFilter<"FoodType"> | number
    type_name?: StringFilter<"FoodType"> | string
    foods?: FoodListRelationFilter
  }

  export type FoodTypeOrderByWithRelationInput = {
    type_id?: SortOrder
    type_name?: SortOrder
    foods?: FoodOrderByRelationAggregateInput
  }

  export type FoodTypeWhereUniqueInput = Prisma.AtLeast<{
    type_id?: number
    AND?: FoodTypeWhereInput | FoodTypeWhereInput[]
    OR?: FoodTypeWhereInput[]
    NOT?: FoodTypeWhereInput | FoodTypeWhereInput[]
    type_name?: StringFilter<"FoodType"> | string
    foods?: FoodListRelationFilter
  }, "type_id">

  export type FoodTypeOrderByWithAggregationInput = {
    type_id?: SortOrder
    type_name?: SortOrder
    _count?: FoodTypeCountOrderByAggregateInput
    _avg?: FoodTypeAvgOrderByAggregateInput
    _max?: FoodTypeMaxOrderByAggregateInput
    _min?: FoodTypeMinOrderByAggregateInput
    _sum?: FoodTypeSumOrderByAggregateInput
  }

  export type FoodTypeScalarWhereWithAggregatesInput = {
    AND?: FoodTypeScalarWhereWithAggregatesInput | FoodTypeScalarWhereWithAggregatesInput[]
    OR?: FoodTypeScalarWhereWithAggregatesInput[]
    NOT?: FoodTypeScalarWhereWithAggregatesInput | FoodTypeScalarWhereWithAggregatesInput[]
    type_id?: IntWithAggregatesFilter<"FoodType"> | number
    type_name?: StringWithAggregatesFilter<"FoodType"> | string
  }

  export type FoodWhereInput = {
    AND?: FoodWhereInput | FoodWhereInput[]
    OR?: FoodWhereInput[]
    NOT?: FoodWhereInput | FoodWhereInput[]
    food_id?: IntFilter<"Food"> | number
    food_name?: StringFilter<"Food"> | string
    image?: StringFilter<"Food"> | string
    price?: FloatFilter<"Food"> | number
    description?: StringFilter<"Food"> | string
    type_id?: IntFilter<"Food"> | number
    type?: XOR<FoodTypeRelationFilter, FoodTypeWhereInput>
    sub_foods?: SubFoodListRelationFilter
    order_tables?: OrderTableListRelationFilter
  }

  export type FoodOrderByWithRelationInput = {
    food_id?: SortOrder
    food_name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    description?: SortOrder
    type_id?: SortOrder
    type?: FoodTypeOrderByWithRelationInput
    sub_foods?: SubFoodOrderByRelationAggregateInput
    order_tables?: OrderTableOrderByRelationAggregateInput
  }

  export type FoodWhereUniqueInput = Prisma.AtLeast<{
    food_id?: number
    AND?: FoodWhereInput | FoodWhereInput[]
    OR?: FoodWhereInput[]
    NOT?: FoodWhereInput | FoodWhereInput[]
    food_name?: StringFilter<"Food"> | string
    image?: StringFilter<"Food"> | string
    price?: FloatFilter<"Food"> | number
    description?: StringFilter<"Food"> | string
    type_id?: IntFilter<"Food"> | number
    type?: XOR<FoodTypeRelationFilter, FoodTypeWhereInput>
    sub_foods?: SubFoodListRelationFilter
    order_tables?: OrderTableListRelationFilter
  }, "food_id">

  export type FoodOrderByWithAggregationInput = {
    food_id?: SortOrder
    food_name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    description?: SortOrder
    type_id?: SortOrder
    _count?: FoodCountOrderByAggregateInput
    _avg?: FoodAvgOrderByAggregateInput
    _max?: FoodMaxOrderByAggregateInput
    _min?: FoodMinOrderByAggregateInput
    _sum?: FoodSumOrderByAggregateInput
  }

  export type FoodScalarWhereWithAggregatesInput = {
    AND?: FoodScalarWhereWithAggregatesInput | FoodScalarWhereWithAggregatesInput[]
    OR?: FoodScalarWhereWithAggregatesInput[]
    NOT?: FoodScalarWhereWithAggregatesInput | FoodScalarWhereWithAggregatesInput[]
    food_id?: IntWithAggregatesFilter<"Food"> | number
    food_name?: StringWithAggregatesFilter<"Food"> | string
    image?: StringWithAggregatesFilter<"Food"> | string
    price?: FloatWithAggregatesFilter<"Food"> | number
    description?: StringWithAggregatesFilter<"Food"> | string
    type_id?: IntWithAggregatesFilter<"Food"> | number
  }

  export type OrderTableWhereInput = {
    AND?: OrderTableWhereInput | OrderTableWhereInput[]
    OR?: OrderTableWhereInput[]
    NOT?: OrderTableWhereInput | OrderTableWhereInput[]
    id?: IntFilter<"OrderTable"> | number
    user_id?: IntFilter<"OrderTable"> | number
    food_id?: IntFilter<"OrderTable"> | number
    amount?: IntFilter<"OrderTable"> | number
    code?: StringFilter<"OrderTable"> | string
    arr_sub_id?: StringNullableFilter<"OrderTable"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    food?: XOR<FoodRelationFilter, FoodWhereInput>
  }

  export type OrderTableOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    food_id?: SortOrder
    amount?: SortOrder
    code?: SortOrder
    arr_sub_id?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    food?: FoodOrderByWithRelationInput
  }

  export type OrderTableWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderTableWhereInput | OrderTableWhereInput[]
    OR?: OrderTableWhereInput[]
    NOT?: OrderTableWhereInput | OrderTableWhereInput[]
    user_id?: IntFilter<"OrderTable"> | number
    food_id?: IntFilter<"OrderTable"> | number
    amount?: IntFilter<"OrderTable"> | number
    code?: StringFilter<"OrderTable"> | string
    arr_sub_id?: StringNullableFilter<"OrderTable"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    food?: XOR<FoodRelationFilter, FoodWhereInput>
  }, "id">

  export type OrderTableOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    food_id?: SortOrder
    amount?: SortOrder
    code?: SortOrder
    arr_sub_id?: SortOrderInput | SortOrder
    _count?: OrderTableCountOrderByAggregateInput
    _avg?: OrderTableAvgOrderByAggregateInput
    _max?: OrderTableMaxOrderByAggregateInput
    _min?: OrderTableMinOrderByAggregateInput
    _sum?: OrderTableSumOrderByAggregateInput
  }

  export type OrderTableScalarWhereWithAggregatesInput = {
    AND?: OrderTableScalarWhereWithAggregatesInput | OrderTableScalarWhereWithAggregatesInput[]
    OR?: OrderTableScalarWhereWithAggregatesInput[]
    NOT?: OrderTableScalarWhereWithAggregatesInput | OrderTableScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OrderTable"> | number
    user_id?: IntWithAggregatesFilter<"OrderTable"> | number
    food_id?: IntWithAggregatesFilter<"OrderTable"> | number
    amount?: IntWithAggregatesFilter<"OrderTable"> | number
    code?: StringWithAggregatesFilter<"OrderTable"> | string
    arr_sub_id?: StringNullableWithAggregatesFilter<"OrderTable"> | string | null
  }

  export type SubFoodWhereInput = {
    AND?: SubFoodWhereInput | SubFoodWhereInput[]
    OR?: SubFoodWhereInput[]
    NOT?: SubFoodWhereInput | SubFoodWhereInput[]
    sub_id?: IntFilter<"SubFood"> | number
    sub_name?: StringFilter<"SubFood"> | string
    sub_price?: FloatFilter<"SubFood"> | number
    food_id?: IntFilter<"SubFood"> | number
    food?: XOR<FoodRelationFilter, FoodWhereInput>
  }

  export type SubFoodOrderByWithRelationInput = {
    sub_id?: SortOrder
    sub_name?: SortOrder
    sub_price?: SortOrder
    food_id?: SortOrder
    food?: FoodOrderByWithRelationInput
  }

  export type SubFoodWhereUniqueInput = Prisma.AtLeast<{
    sub_id?: number
    AND?: SubFoodWhereInput | SubFoodWhereInput[]
    OR?: SubFoodWhereInput[]
    NOT?: SubFoodWhereInput | SubFoodWhereInput[]
    sub_name?: StringFilter<"SubFood"> | string
    sub_price?: FloatFilter<"SubFood"> | number
    food_id?: IntFilter<"SubFood"> | number
    food?: XOR<FoodRelationFilter, FoodWhereInput>
  }, "sub_id">

  export type SubFoodOrderByWithAggregationInput = {
    sub_id?: SortOrder
    sub_name?: SortOrder
    sub_price?: SortOrder
    food_id?: SortOrder
    _count?: SubFoodCountOrderByAggregateInput
    _avg?: SubFoodAvgOrderByAggregateInput
    _max?: SubFoodMaxOrderByAggregateInput
    _min?: SubFoodMinOrderByAggregateInput
    _sum?: SubFoodSumOrderByAggregateInput
  }

  export type SubFoodScalarWhereWithAggregatesInput = {
    AND?: SubFoodScalarWhereWithAggregatesInput | SubFoodScalarWhereWithAggregatesInput[]
    OR?: SubFoodScalarWhereWithAggregatesInput[]
    NOT?: SubFoodScalarWhereWithAggregatesInput | SubFoodScalarWhereWithAggregatesInput[]
    sub_id?: IntWithAggregatesFilter<"SubFood"> | number
    sub_name?: StringWithAggregatesFilter<"SubFood"> | string
    sub_price?: FloatWithAggregatesFilter<"SubFood"> | number
    food_id?: IntWithAggregatesFilter<"SubFood"> | number
  }

  export type UserCreateInput = {
    full_name: string
    email: string
    password: string
    rate_res?: RateResCreateNestedManyWithoutUserInput
    like_res?: LikeResCreateNestedManyWithoutUserInput
    order_table?: OrderTableCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    user_id?: number
    full_name: string
    email: string
    password: string
    rate_res?: RateResUncheckedCreateNestedManyWithoutUserInput
    like_res?: LikeResUncheckedCreateNestedManyWithoutUserInput
    order_table?: OrderTableUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rate_res?: RateResUpdateManyWithoutUserNestedInput
    like_res?: LikeResUpdateManyWithoutUserNestedInput
    order_table?: OrderTableUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rate_res?: RateResUncheckedUpdateManyWithoutUserNestedInput
    like_res?: LikeResUncheckedUpdateManyWithoutUserNestedInput
    order_table?: OrderTableUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    user_id?: number
    full_name: string
    email: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type RateResCreateInput = {
    amount: number
    date_rate?: Date | string
    user: UserCreateNestedOneWithoutRate_resInput
    restaurant: RestaurantCreateNestedOneWithoutRate_resInput
  }

  export type RateResUncheckedCreateInput = {
    user_id: number
    res_id: number
    amount: number
    date_rate?: Date | string
  }

  export type RateResUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    date_rate?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRate_resNestedInput
    restaurant?: RestaurantUpdateOneRequiredWithoutRate_resNestedInput
  }

  export type RateResUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    res_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    date_rate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RateResCreateManyInput = {
    user_id: number
    res_id: number
    amount: number
    date_rate?: Date | string
  }

  export type RateResUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
    date_rate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RateResUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    res_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    date_rate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RestaurantCreateInput = {
    res_name: string
    image: string
    description: string
    rate_res?: RateResCreateNestedManyWithoutRestaurantInput
    like_res?: LikeResCreateNestedManyWithoutRestaurantInput
  }

  export type RestaurantUncheckedCreateInput = {
    res_id?: number
    res_name: string
    image: string
    description: string
    rate_res?: RateResUncheckedCreateNestedManyWithoutRestaurantInput
    like_res?: LikeResUncheckedCreateNestedManyWithoutRestaurantInput
  }

  export type RestaurantUpdateInput = {
    res_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rate_res?: RateResUpdateManyWithoutRestaurantNestedInput
    like_res?: LikeResUpdateManyWithoutRestaurantNestedInput
  }

  export type RestaurantUncheckedUpdateInput = {
    res_id?: IntFieldUpdateOperationsInput | number
    res_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rate_res?: RateResUncheckedUpdateManyWithoutRestaurantNestedInput
    like_res?: LikeResUncheckedUpdateManyWithoutRestaurantNestedInput
  }

  export type RestaurantCreateManyInput = {
    res_id?: number
    res_name: string
    image: string
    description: string
  }

  export type RestaurantUpdateManyMutationInput = {
    res_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type RestaurantUncheckedUpdateManyInput = {
    res_id?: IntFieldUpdateOperationsInput | number
    res_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type LikeResCreateInput = {
    date_like: Date | string
    user: UserCreateNestedOneWithoutLike_resInput
    restaurant: RestaurantCreateNestedOneWithoutLike_resInput
  }

  export type LikeResUncheckedCreateInput = {
    user_id: number
    res_id: number
    date_like: Date | string
  }

  export type LikeResUpdateInput = {
    date_like?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLike_resNestedInput
    restaurant?: RestaurantUpdateOneRequiredWithoutLike_resNestedInput
  }

  export type LikeResUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    res_id?: IntFieldUpdateOperationsInput | number
    date_like?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeResCreateManyInput = {
    user_id: number
    res_id: number
    date_like: Date | string
  }

  export type LikeResUpdateManyMutationInput = {
    date_like?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeResUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    res_id?: IntFieldUpdateOperationsInput | number
    date_like?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodTypeCreateInput = {
    type_name: string
    foods?: FoodCreateNestedManyWithoutTypeInput
  }

  export type FoodTypeUncheckedCreateInput = {
    type_id?: number
    type_name: string
    foods?: FoodUncheckedCreateNestedManyWithoutTypeInput
  }

  export type FoodTypeUpdateInput = {
    type_name?: StringFieldUpdateOperationsInput | string
    foods?: FoodUpdateManyWithoutTypeNestedInput
  }

  export type FoodTypeUncheckedUpdateInput = {
    type_id?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    foods?: FoodUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type FoodTypeCreateManyInput = {
    type_id?: number
    type_name: string
  }

  export type FoodTypeUpdateManyMutationInput = {
    type_name?: StringFieldUpdateOperationsInput | string
  }

  export type FoodTypeUncheckedUpdateManyInput = {
    type_id?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
  }

  export type FoodCreateInput = {
    food_name: string
    image: string
    price: number
    description: string
    type: FoodTypeCreateNestedOneWithoutFoodsInput
    sub_foods?: SubFoodCreateNestedManyWithoutFoodInput
    order_tables?: OrderTableCreateNestedManyWithoutFoodInput
  }

  export type FoodUncheckedCreateInput = {
    food_id?: number
    food_name: string
    image: string
    price: number
    description: string
    type_id: number
    sub_foods?: SubFoodUncheckedCreateNestedManyWithoutFoodInput
    order_tables?: OrderTableUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodUpdateInput = {
    food_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: FoodTypeUpdateOneRequiredWithoutFoodsNestedInput
    sub_foods?: SubFoodUpdateManyWithoutFoodNestedInput
    order_tables?: OrderTableUpdateManyWithoutFoodNestedInput
  }

  export type FoodUncheckedUpdateInput = {
    food_id?: IntFieldUpdateOperationsInput | number
    food_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type_id?: IntFieldUpdateOperationsInput | number
    sub_foods?: SubFoodUncheckedUpdateManyWithoutFoodNestedInput
    order_tables?: OrderTableUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type FoodCreateManyInput = {
    food_id?: number
    food_name: string
    image: string
    price: number
    description: string
    type_id: number
  }

  export type FoodUpdateManyMutationInput = {
    food_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type FoodUncheckedUpdateManyInput = {
    food_id?: IntFieldUpdateOperationsInput | number
    food_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type_id?: IntFieldUpdateOperationsInput | number
  }

  export type OrderTableCreateInput = {
    amount: number
    code: string
    arr_sub_id?: string | null
    user: UserCreateNestedOneWithoutOrder_tableInput
    food: FoodCreateNestedOneWithoutOrder_tablesInput
  }

  export type OrderTableUncheckedCreateInput = {
    id?: number
    user_id: number
    food_id: number
    amount: number
    code: string
    arr_sub_id?: string | null
  }

  export type OrderTableUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    arr_sub_id?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutOrder_tableNestedInput
    food?: FoodUpdateOneRequiredWithoutOrder_tablesNestedInput
  }

  export type OrderTableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    food_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    arr_sub_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderTableCreateManyInput = {
    id?: number
    user_id: number
    food_id: number
    amount: number
    code: string
    arr_sub_id?: string | null
  }

  export type OrderTableUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    arr_sub_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderTableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    food_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    arr_sub_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubFoodCreateInput = {
    sub_name: string
    sub_price: number
    food: FoodCreateNestedOneWithoutSub_foodsInput
  }

  export type SubFoodUncheckedCreateInput = {
    sub_id?: number
    sub_name: string
    sub_price: number
    food_id: number
  }

  export type SubFoodUpdateInput = {
    sub_name?: StringFieldUpdateOperationsInput | string
    sub_price?: FloatFieldUpdateOperationsInput | number
    food?: FoodUpdateOneRequiredWithoutSub_foodsNestedInput
  }

  export type SubFoodUncheckedUpdateInput = {
    sub_id?: IntFieldUpdateOperationsInput | number
    sub_name?: StringFieldUpdateOperationsInput | string
    sub_price?: FloatFieldUpdateOperationsInput | number
    food_id?: IntFieldUpdateOperationsInput | number
  }

  export type SubFoodCreateManyInput = {
    sub_id?: number
    sub_name: string
    sub_price: number
    food_id: number
  }

  export type SubFoodUpdateManyMutationInput = {
    sub_name?: StringFieldUpdateOperationsInput | string
    sub_price?: FloatFieldUpdateOperationsInput | number
  }

  export type SubFoodUncheckedUpdateManyInput = {
    sub_id?: IntFieldUpdateOperationsInput | number
    sub_name?: StringFieldUpdateOperationsInput | string
    sub_price?: FloatFieldUpdateOperationsInput | number
    food_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type RateResListRelationFilter = {
    every?: RateResWhereInput
    some?: RateResWhereInput
    none?: RateResWhereInput
  }

  export type LikeResListRelationFilter = {
    every?: LikeResWhereInput
    some?: LikeResWhereInput
    none?: LikeResWhereInput
  }

  export type OrderTableListRelationFilter = {
    every?: OrderTableWhereInput
    some?: OrderTableWhereInput
    none?: OrderTableWhereInput
  }

  export type RateResOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikeResOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderTableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    user_id?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    user_id?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    user_id?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RestaurantRelationFilter = {
    is?: RestaurantWhereInput
    isNot?: RestaurantWhereInput
  }

  export type RateResUser_idRes_idAmountCompoundUniqueInput = {
    user_id: number
    res_id: number
    amount: number
  }

  export type RateResUser_idRes_idCompoundUniqueInput = {
    user_id: number
    res_id: number
  }

  export type RateResCountOrderByAggregateInput = {
    user_id?: SortOrder
    res_id?: SortOrder
    amount?: SortOrder
    date_rate?: SortOrder
  }

  export type RateResAvgOrderByAggregateInput = {
    user_id?: SortOrder
    res_id?: SortOrder
    amount?: SortOrder
  }

  export type RateResMaxOrderByAggregateInput = {
    user_id?: SortOrder
    res_id?: SortOrder
    amount?: SortOrder
    date_rate?: SortOrder
  }

  export type RateResMinOrderByAggregateInput = {
    user_id?: SortOrder
    res_id?: SortOrder
    amount?: SortOrder
    date_rate?: SortOrder
  }

  export type RateResSumOrderByAggregateInput = {
    user_id?: SortOrder
    res_id?: SortOrder
    amount?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RestaurantCountOrderByAggregateInput = {
    res_id?: SortOrder
    res_name?: SortOrder
    image?: SortOrder
    description?: SortOrder
  }

  export type RestaurantAvgOrderByAggregateInput = {
    res_id?: SortOrder
  }

  export type RestaurantMaxOrderByAggregateInput = {
    res_id?: SortOrder
    res_name?: SortOrder
    image?: SortOrder
    description?: SortOrder
  }

  export type RestaurantMinOrderByAggregateInput = {
    res_id?: SortOrder
    res_name?: SortOrder
    image?: SortOrder
    description?: SortOrder
  }

  export type RestaurantSumOrderByAggregateInput = {
    res_id?: SortOrder
  }

  export type LikeResUser_idRes_idDate_likeCompoundUniqueInput = {
    user_id: number
    res_id: number
    date_like: Date | string
  }

  export type LikeResCountOrderByAggregateInput = {
    user_id?: SortOrder
    res_id?: SortOrder
    date_like?: SortOrder
  }

  export type LikeResAvgOrderByAggregateInput = {
    user_id?: SortOrder
    res_id?: SortOrder
  }

  export type LikeResMaxOrderByAggregateInput = {
    user_id?: SortOrder
    res_id?: SortOrder
    date_like?: SortOrder
  }

  export type LikeResMinOrderByAggregateInput = {
    user_id?: SortOrder
    res_id?: SortOrder
    date_like?: SortOrder
  }

  export type LikeResSumOrderByAggregateInput = {
    user_id?: SortOrder
    res_id?: SortOrder
  }

  export type FoodListRelationFilter = {
    every?: FoodWhereInput
    some?: FoodWhereInput
    none?: FoodWhereInput
  }

  export type FoodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FoodTypeCountOrderByAggregateInput = {
    type_id?: SortOrder
    type_name?: SortOrder
  }

  export type FoodTypeAvgOrderByAggregateInput = {
    type_id?: SortOrder
  }

  export type FoodTypeMaxOrderByAggregateInput = {
    type_id?: SortOrder
    type_name?: SortOrder
  }

  export type FoodTypeMinOrderByAggregateInput = {
    type_id?: SortOrder
    type_name?: SortOrder
  }

  export type FoodTypeSumOrderByAggregateInput = {
    type_id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FoodTypeRelationFilter = {
    is?: FoodTypeWhereInput
    isNot?: FoodTypeWhereInput
  }

  export type SubFoodListRelationFilter = {
    every?: SubFoodWhereInput
    some?: SubFoodWhereInput
    none?: SubFoodWhereInput
  }

  export type SubFoodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FoodCountOrderByAggregateInput = {
    food_id?: SortOrder
    food_name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    description?: SortOrder
    type_id?: SortOrder
  }

  export type FoodAvgOrderByAggregateInput = {
    food_id?: SortOrder
    price?: SortOrder
    type_id?: SortOrder
  }

  export type FoodMaxOrderByAggregateInput = {
    food_id?: SortOrder
    food_name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    description?: SortOrder
    type_id?: SortOrder
  }

  export type FoodMinOrderByAggregateInput = {
    food_id?: SortOrder
    food_name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    description?: SortOrder
    type_id?: SortOrder
  }

  export type FoodSumOrderByAggregateInput = {
    food_id?: SortOrder
    price?: SortOrder
    type_id?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FoodRelationFilter = {
    is?: FoodWhereInput
    isNot?: FoodWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type OrderTableCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    food_id?: SortOrder
    amount?: SortOrder
    code?: SortOrder
    arr_sub_id?: SortOrder
  }

  export type OrderTableAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    food_id?: SortOrder
    amount?: SortOrder
  }

  export type OrderTableMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    food_id?: SortOrder
    amount?: SortOrder
    code?: SortOrder
    arr_sub_id?: SortOrder
  }

  export type OrderTableMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    food_id?: SortOrder
    amount?: SortOrder
    code?: SortOrder
    arr_sub_id?: SortOrder
  }

  export type OrderTableSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    food_id?: SortOrder
    amount?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type SubFoodCountOrderByAggregateInput = {
    sub_id?: SortOrder
    sub_name?: SortOrder
    sub_price?: SortOrder
    food_id?: SortOrder
  }

  export type SubFoodAvgOrderByAggregateInput = {
    sub_id?: SortOrder
    sub_price?: SortOrder
    food_id?: SortOrder
  }

  export type SubFoodMaxOrderByAggregateInput = {
    sub_id?: SortOrder
    sub_name?: SortOrder
    sub_price?: SortOrder
    food_id?: SortOrder
  }

  export type SubFoodMinOrderByAggregateInput = {
    sub_id?: SortOrder
    sub_name?: SortOrder
    sub_price?: SortOrder
    food_id?: SortOrder
  }

  export type SubFoodSumOrderByAggregateInput = {
    sub_id?: SortOrder
    sub_price?: SortOrder
    food_id?: SortOrder
  }

  export type RateResCreateNestedManyWithoutUserInput = {
    create?: XOR<RateResCreateWithoutUserInput, RateResUncheckedCreateWithoutUserInput> | RateResCreateWithoutUserInput[] | RateResUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RateResCreateOrConnectWithoutUserInput | RateResCreateOrConnectWithoutUserInput[]
    createMany?: RateResCreateManyUserInputEnvelope
    connect?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
  }

  export type LikeResCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeResCreateWithoutUserInput, LikeResUncheckedCreateWithoutUserInput> | LikeResCreateWithoutUserInput[] | LikeResUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeResCreateOrConnectWithoutUserInput | LikeResCreateOrConnectWithoutUserInput[]
    createMany?: LikeResCreateManyUserInputEnvelope
    connect?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
  }

  export type OrderTableCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderTableCreateWithoutUserInput, OrderTableUncheckedCreateWithoutUserInput> | OrderTableCreateWithoutUserInput[] | OrderTableUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderTableCreateOrConnectWithoutUserInput | OrderTableCreateOrConnectWithoutUserInput[]
    createMany?: OrderTableCreateManyUserInputEnvelope
    connect?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
  }

  export type RateResUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RateResCreateWithoutUserInput, RateResUncheckedCreateWithoutUserInput> | RateResCreateWithoutUserInput[] | RateResUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RateResCreateOrConnectWithoutUserInput | RateResCreateOrConnectWithoutUserInput[]
    createMany?: RateResCreateManyUserInputEnvelope
    connect?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
  }

  export type LikeResUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeResCreateWithoutUserInput, LikeResUncheckedCreateWithoutUserInput> | LikeResCreateWithoutUserInput[] | LikeResUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeResCreateOrConnectWithoutUserInput | LikeResCreateOrConnectWithoutUserInput[]
    createMany?: LikeResCreateManyUserInputEnvelope
    connect?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
  }

  export type OrderTableUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderTableCreateWithoutUserInput, OrderTableUncheckedCreateWithoutUserInput> | OrderTableCreateWithoutUserInput[] | OrderTableUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderTableCreateOrConnectWithoutUserInput | OrderTableCreateOrConnectWithoutUserInput[]
    createMany?: OrderTableCreateManyUserInputEnvelope
    connect?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type RateResUpdateManyWithoutUserNestedInput = {
    create?: XOR<RateResCreateWithoutUserInput, RateResUncheckedCreateWithoutUserInput> | RateResCreateWithoutUserInput[] | RateResUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RateResCreateOrConnectWithoutUserInput | RateResCreateOrConnectWithoutUserInput[]
    upsert?: RateResUpsertWithWhereUniqueWithoutUserInput | RateResUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RateResCreateManyUserInputEnvelope
    set?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    disconnect?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    delete?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    connect?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    update?: RateResUpdateWithWhereUniqueWithoutUserInput | RateResUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RateResUpdateManyWithWhereWithoutUserInput | RateResUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RateResScalarWhereInput | RateResScalarWhereInput[]
  }

  export type LikeResUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeResCreateWithoutUserInput, LikeResUncheckedCreateWithoutUserInput> | LikeResCreateWithoutUserInput[] | LikeResUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeResCreateOrConnectWithoutUserInput | LikeResCreateOrConnectWithoutUserInput[]
    upsert?: LikeResUpsertWithWhereUniqueWithoutUserInput | LikeResUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeResCreateManyUserInputEnvelope
    set?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    disconnect?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    delete?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    connect?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    update?: LikeResUpdateWithWhereUniqueWithoutUserInput | LikeResUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeResUpdateManyWithWhereWithoutUserInput | LikeResUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeResScalarWhereInput | LikeResScalarWhereInput[]
  }

  export type OrderTableUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderTableCreateWithoutUserInput, OrderTableUncheckedCreateWithoutUserInput> | OrderTableCreateWithoutUserInput[] | OrderTableUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderTableCreateOrConnectWithoutUserInput | OrderTableCreateOrConnectWithoutUserInput[]
    upsert?: OrderTableUpsertWithWhereUniqueWithoutUserInput | OrderTableUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderTableCreateManyUserInputEnvelope
    set?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    disconnect?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    delete?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    connect?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    update?: OrderTableUpdateWithWhereUniqueWithoutUserInput | OrderTableUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderTableUpdateManyWithWhereWithoutUserInput | OrderTableUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderTableScalarWhereInput | OrderTableScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RateResUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RateResCreateWithoutUserInput, RateResUncheckedCreateWithoutUserInput> | RateResCreateWithoutUserInput[] | RateResUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RateResCreateOrConnectWithoutUserInput | RateResCreateOrConnectWithoutUserInput[]
    upsert?: RateResUpsertWithWhereUniqueWithoutUserInput | RateResUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RateResCreateManyUserInputEnvelope
    set?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    disconnect?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    delete?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    connect?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    update?: RateResUpdateWithWhereUniqueWithoutUserInput | RateResUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RateResUpdateManyWithWhereWithoutUserInput | RateResUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RateResScalarWhereInput | RateResScalarWhereInput[]
  }

  export type LikeResUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeResCreateWithoutUserInput, LikeResUncheckedCreateWithoutUserInput> | LikeResCreateWithoutUserInput[] | LikeResUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeResCreateOrConnectWithoutUserInput | LikeResCreateOrConnectWithoutUserInput[]
    upsert?: LikeResUpsertWithWhereUniqueWithoutUserInput | LikeResUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeResCreateManyUserInputEnvelope
    set?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    disconnect?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    delete?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    connect?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    update?: LikeResUpdateWithWhereUniqueWithoutUserInput | LikeResUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeResUpdateManyWithWhereWithoutUserInput | LikeResUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeResScalarWhereInput | LikeResScalarWhereInput[]
  }

  export type OrderTableUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderTableCreateWithoutUserInput, OrderTableUncheckedCreateWithoutUserInput> | OrderTableCreateWithoutUserInput[] | OrderTableUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderTableCreateOrConnectWithoutUserInput | OrderTableCreateOrConnectWithoutUserInput[]
    upsert?: OrderTableUpsertWithWhereUniqueWithoutUserInput | OrderTableUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderTableCreateManyUserInputEnvelope
    set?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    disconnect?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    delete?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    connect?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    update?: OrderTableUpdateWithWhereUniqueWithoutUserInput | OrderTableUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderTableUpdateManyWithWhereWithoutUserInput | OrderTableUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderTableScalarWhereInput | OrderTableScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRate_resInput = {
    create?: XOR<UserCreateWithoutRate_resInput, UserUncheckedCreateWithoutRate_resInput>
    connectOrCreate?: UserCreateOrConnectWithoutRate_resInput
    connect?: UserWhereUniqueInput
  }

  export type RestaurantCreateNestedOneWithoutRate_resInput = {
    create?: XOR<RestaurantCreateWithoutRate_resInput, RestaurantUncheckedCreateWithoutRate_resInput>
    connectOrCreate?: RestaurantCreateOrConnectWithoutRate_resInput
    connect?: RestaurantWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutRate_resNestedInput = {
    create?: XOR<UserCreateWithoutRate_resInput, UserUncheckedCreateWithoutRate_resInput>
    connectOrCreate?: UserCreateOrConnectWithoutRate_resInput
    upsert?: UserUpsertWithoutRate_resInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRate_resInput, UserUpdateWithoutRate_resInput>, UserUncheckedUpdateWithoutRate_resInput>
  }

  export type RestaurantUpdateOneRequiredWithoutRate_resNestedInput = {
    create?: XOR<RestaurantCreateWithoutRate_resInput, RestaurantUncheckedCreateWithoutRate_resInput>
    connectOrCreate?: RestaurantCreateOrConnectWithoutRate_resInput
    upsert?: RestaurantUpsertWithoutRate_resInput
    connect?: RestaurantWhereUniqueInput
    update?: XOR<XOR<RestaurantUpdateToOneWithWhereWithoutRate_resInput, RestaurantUpdateWithoutRate_resInput>, RestaurantUncheckedUpdateWithoutRate_resInput>
  }

  export type RateResCreateNestedManyWithoutRestaurantInput = {
    create?: XOR<RateResCreateWithoutRestaurantInput, RateResUncheckedCreateWithoutRestaurantInput> | RateResCreateWithoutRestaurantInput[] | RateResUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: RateResCreateOrConnectWithoutRestaurantInput | RateResCreateOrConnectWithoutRestaurantInput[]
    createMany?: RateResCreateManyRestaurantInputEnvelope
    connect?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
  }

  export type LikeResCreateNestedManyWithoutRestaurantInput = {
    create?: XOR<LikeResCreateWithoutRestaurantInput, LikeResUncheckedCreateWithoutRestaurantInput> | LikeResCreateWithoutRestaurantInput[] | LikeResUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: LikeResCreateOrConnectWithoutRestaurantInput | LikeResCreateOrConnectWithoutRestaurantInput[]
    createMany?: LikeResCreateManyRestaurantInputEnvelope
    connect?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
  }

  export type RateResUncheckedCreateNestedManyWithoutRestaurantInput = {
    create?: XOR<RateResCreateWithoutRestaurantInput, RateResUncheckedCreateWithoutRestaurantInput> | RateResCreateWithoutRestaurantInput[] | RateResUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: RateResCreateOrConnectWithoutRestaurantInput | RateResCreateOrConnectWithoutRestaurantInput[]
    createMany?: RateResCreateManyRestaurantInputEnvelope
    connect?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
  }

  export type LikeResUncheckedCreateNestedManyWithoutRestaurantInput = {
    create?: XOR<LikeResCreateWithoutRestaurantInput, LikeResUncheckedCreateWithoutRestaurantInput> | LikeResCreateWithoutRestaurantInput[] | LikeResUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: LikeResCreateOrConnectWithoutRestaurantInput | LikeResCreateOrConnectWithoutRestaurantInput[]
    createMany?: LikeResCreateManyRestaurantInputEnvelope
    connect?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
  }

  export type RateResUpdateManyWithoutRestaurantNestedInput = {
    create?: XOR<RateResCreateWithoutRestaurantInput, RateResUncheckedCreateWithoutRestaurantInput> | RateResCreateWithoutRestaurantInput[] | RateResUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: RateResCreateOrConnectWithoutRestaurantInput | RateResCreateOrConnectWithoutRestaurantInput[]
    upsert?: RateResUpsertWithWhereUniqueWithoutRestaurantInput | RateResUpsertWithWhereUniqueWithoutRestaurantInput[]
    createMany?: RateResCreateManyRestaurantInputEnvelope
    set?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    disconnect?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    delete?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    connect?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    update?: RateResUpdateWithWhereUniqueWithoutRestaurantInput | RateResUpdateWithWhereUniqueWithoutRestaurantInput[]
    updateMany?: RateResUpdateManyWithWhereWithoutRestaurantInput | RateResUpdateManyWithWhereWithoutRestaurantInput[]
    deleteMany?: RateResScalarWhereInput | RateResScalarWhereInput[]
  }

  export type LikeResUpdateManyWithoutRestaurantNestedInput = {
    create?: XOR<LikeResCreateWithoutRestaurantInput, LikeResUncheckedCreateWithoutRestaurantInput> | LikeResCreateWithoutRestaurantInput[] | LikeResUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: LikeResCreateOrConnectWithoutRestaurantInput | LikeResCreateOrConnectWithoutRestaurantInput[]
    upsert?: LikeResUpsertWithWhereUniqueWithoutRestaurantInput | LikeResUpsertWithWhereUniqueWithoutRestaurantInput[]
    createMany?: LikeResCreateManyRestaurantInputEnvelope
    set?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    disconnect?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    delete?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    connect?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    update?: LikeResUpdateWithWhereUniqueWithoutRestaurantInput | LikeResUpdateWithWhereUniqueWithoutRestaurantInput[]
    updateMany?: LikeResUpdateManyWithWhereWithoutRestaurantInput | LikeResUpdateManyWithWhereWithoutRestaurantInput[]
    deleteMany?: LikeResScalarWhereInput | LikeResScalarWhereInput[]
  }

  export type RateResUncheckedUpdateManyWithoutRestaurantNestedInput = {
    create?: XOR<RateResCreateWithoutRestaurantInput, RateResUncheckedCreateWithoutRestaurantInput> | RateResCreateWithoutRestaurantInput[] | RateResUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: RateResCreateOrConnectWithoutRestaurantInput | RateResCreateOrConnectWithoutRestaurantInput[]
    upsert?: RateResUpsertWithWhereUniqueWithoutRestaurantInput | RateResUpsertWithWhereUniqueWithoutRestaurantInput[]
    createMany?: RateResCreateManyRestaurantInputEnvelope
    set?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    disconnect?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    delete?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    connect?: RateResWhereUniqueInput | RateResWhereUniqueInput[]
    update?: RateResUpdateWithWhereUniqueWithoutRestaurantInput | RateResUpdateWithWhereUniqueWithoutRestaurantInput[]
    updateMany?: RateResUpdateManyWithWhereWithoutRestaurantInput | RateResUpdateManyWithWhereWithoutRestaurantInput[]
    deleteMany?: RateResScalarWhereInput | RateResScalarWhereInput[]
  }

  export type LikeResUncheckedUpdateManyWithoutRestaurantNestedInput = {
    create?: XOR<LikeResCreateWithoutRestaurantInput, LikeResUncheckedCreateWithoutRestaurantInput> | LikeResCreateWithoutRestaurantInput[] | LikeResUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: LikeResCreateOrConnectWithoutRestaurantInput | LikeResCreateOrConnectWithoutRestaurantInput[]
    upsert?: LikeResUpsertWithWhereUniqueWithoutRestaurantInput | LikeResUpsertWithWhereUniqueWithoutRestaurantInput[]
    createMany?: LikeResCreateManyRestaurantInputEnvelope
    set?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    disconnect?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    delete?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    connect?: LikeResWhereUniqueInput | LikeResWhereUniqueInput[]
    update?: LikeResUpdateWithWhereUniqueWithoutRestaurantInput | LikeResUpdateWithWhereUniqueWithoutRestaurantInput[]
    updateMany?: LikeResUpdateManyWithWhereWithoutRestaurantInput | LikeResUpdateManyWithWhereWithoutRestaurantInput[]
    deleteMany?: LikeResScalarWhereInput | LikeResScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLike_resInput = {
    create?: XOR<UserCreateWithoutLike_resInput, UserUncheckedCreateWithoutLike_resInput>
    connectOrCreate?: UserCreateOrConnectWithoutLike_resInput
    connect?: UserWhereUniqueInput
  }

  export type RestaurantCreateNestedOneWithoutLike_resInput = {
    create?: XOR<RestaurantCreateWithoutLike_resInput, RestaurantUncheckedCreateWithoutLike_resInput>
    connectOrCreate?: RestaurantCreateOrConnectWithoutLike_resInput
    connect?: RestaurantWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLike_resNestedInput = {
    create?: XOR<UserCreateWithoutLike_resInput, UserUncheckedCreateWithoutLike_resInput>
    connectOrCreate?: UserCreateOrConnectWithoutLike_resInput
    upsert?: UserUpsertWithoutLike_resInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLike_resInput, UserUpdateWithoutLike_resInput>, UserUncheckedUpdateWithoutLike_resInput>
  }

  export type RestaurantUpdateOneRequiredWithoutLike_resNestedInput = {
    create?: XOR<RestaurantCreateWithoutLike_resInput, RestaurantUncheckedCreateWithoutLike_resInput>
    connectOrCreate?: RestaurantCreateOrConnectWithoutLike_resInput
    upsert?: RestaurantUpsertWithoutLike_resInput
    connect?: RestaurantWhereUniqueInput
    update?: XOR<XOR<RestaurantUpdateToOneWithWhereWithoutLike_resInput, RestaurantUpdateWithoutLike_resInput>, RestaurantUncheckedUpdateWithoutLike_resInput>
  }

  export type FoodCreateNestedManyWithoutTypeInput = {
    create?: XOR<FoodCreateWithoutTypeInput, FoodUncheckedCreateWithoutTypeInput> | FoodCreateWithoutTypeInput[] | FoodUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: FoodCreateOrConnectWithoutTypeInput | FoodCreateOrConnectWithoutTypeInput[]
    createMany?: FoodCreateManyTypeInputEnvelope
    connect?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
  }

  export type FoodUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<FoodCreateWithoutTypeInput, FoodUncheckedCreateWithoutTypeInput> | FoodCreateWithoutTypeInput[] | FoodUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: FoodCreateOrConnectWithoutTypeInput | FoodCreateOrConnectWithoutTypeInput[]
    createMany?: FoodCreateManyTypeInputEnvelope
    connect?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
  }

  export type FoodUpdateManyWithoutTypeNestedInput = {
    create?: XOR<FoodCreateWithoutTypeInput, FoodUncheckedCreateWithoutTypeInput> | FoodCreateWithoutTypeInput[] | FoodUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: FoodCreateOrConnectWithoutTypeInput | FoodCreateOrConnectWithoutTypeInput[]
    upsert?: FoodUpsertWithWhereUniqueWithoutTypeInput | FoodUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: FoodCreateManyTypeInputEnvelope
    set?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    disconnect?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    delete?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    connect?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    update?: FoodUpdateWithWhereUniqueWithoutTypeInput | FoodUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: FoodUpdateManyWithWhereWithoutTypeInput | FoodUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: FoodScalarWhereInput | FoodScalarWhereInput[]
  }

  export type FoodUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<FoodCreateWithoutTypeInput, FoodUncheckedCreateWithoutTypeInput> | FoodCreateWithoutTypeInput[] | FoodUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: FoodCreateOrConnectWithoutTypeInput | FoodCreateOrConnectWithoutTypeInput[]
    upsert?: FoodUpsertWithWhereUniqueWithoutTypeInput | FoodUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: FoodCreateManyTypeInputEnvelope
    set?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    disconnect?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    delete?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    connect?: FoodWhereUniqueInput | FoodWhereUniqueInput[]
    update?: FoodUpdateWithWhereUniqueWithoutTypeInput | FoodUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: FoodUpdateManyWithWhereWithoutTypeInput | FoodUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: FoodScalarWhereInput | FoodScalarWhereInput[]
  }

  export type FoodTypeCreateNestedOneWithoutFoodsInput = {
    create?: XOR<FoodTypeCreateWithoutFoodsInput, FoodTypeUncheckedCreateWithoutFoodsInput>
    connectOrCreate?: FoodTypeCreateOrConnectWithoutFoodsInput
    connect?: FoodTypeWhereUniqueInput
  }

  export type SubFoodCreateNestedManyWithoutFoodInput = {
    create?: XOR<SubFoodCreateWithoutFoodInput, SubFoodUncheckedCreateWithoutFoodInput> | SubFoodCreateWithoutFoodInput[] | SubFoodUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: SubFoodCreateOrConnectWithoutFoodInput | SubFoodCreateOrConnectWithoutFoodInput[]
    createMany?: SubFoodCreateManyFoodInputEnvelope
    connect?: SubFoodWhereUniqueInput | SubFoodWhereUniqueInput[]
  }

  export type OrderTableCreateNestedManyWithoutFoodInput = {
    create?: XOR<OrderTableCreateWithoutFoodInput, OrderTableUncheckedCreateWithoutFoodInput> | OrderTableCreateWithoutFoodInput[] | OrderTableUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: OrderTableCreateOrConnectWithoutFoodInput | OrderTableCreateOrConnectWithoutFoodInput[]
    createMany?: OrderTableCreateManyFoodInputEnvelope
    connect?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
  }

  export type SubFoodUncheckedCreateNestedManyWithoutFoodInput = {
    create?: XOR<SubFoodCreateWithoutFoodInput, SubFoodUncheckedCreateWithoutFoodInput> | SubFoodCreateWithoutFoodInput[] | SubFoodUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: SubFoodCreateOrConnectWithoutFoodInput | SubFoodCreateOrConnectWithoutFoodInput[]
    createMany?: SubFoodCreateManyFoodInputEnvelope
    connect?: SubFoodWhereUniqueInput | SubFoodWhereUniqueInput[]
  }

  export type OrderTableUncheckedCreateNestedManyWithoutFoodInput = {
    create?: XOR<OrderTableCreateWithoutFoodInput, OrderTableUncheckedCreateWithoutFoodInput> | OrderTableCreateWithoutFoodInput[] | OrderTableUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: OrderTableCreateOrConnectWithoutFoodInput | OrderTableCreateOrConnectWithoutFoodInput[]
    createMany?: OrderTableCreateManyFoodInputEnvelope
    connect?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FoodTypeUpdateOneRequiredWithoutFoodsNestedInput = {
    create?: XOR<FoodTypeCreateWithoutFoodsInput, FoodTypeUncheckedCreateWithoutFoodsInput>
    connectOrCreate?: FoodTypeCreateOrConnectWithoutFoodsInput
    upsert?: FoodTypeUpsertWithoutFoodsInput
    connect?: FoodTypeWhereUniqueInput
    update?: XOR<XOR<FoodTypeUpdateToOneWithWhereWithoutFoodsInput, FoodTypeUpdateWithoutFoodsInput>, FoodTypeUncheckedUpdateWithoutFoodsInput>
  }

  export type SubFoodUpdateManyWithoutFoodNestedInput = {
    create?: XOR<SubFoodCreateWithoutFoodInput, SubFoodUncheckedCreateWithoutFoodInput> | SubFoodCreateWithoutFoodInput[] | SubFoodUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: SubFoodCreateOrConnectWithoutFoodInput | SubFoodCreateOrConnectWithoutFoodInput[]
    upsert?: SubFoodUpsertWithWhereUniqueWithoutFoodInput | SubFoodUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: SubFoodCreateManyFoodInputEnvelope
    set?: SubFoodWhereUniqueInput | SubFoodWhereUniqueInput[]
    disconnect?: SubFoodWhereUniqueInput | SubFoodWhereUniqueInput[]
    delete?: SubFoodWhereUniqueInput | SubFoodWhereUniqueInput[]
    connect?: SubFoodWhereUniqueInput | SubFoodWhereUniqueInput[]
    update?: SubFoodUpdateWithWhereUniqueWithoutFoodInput | SubFoodUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: SubFoodUpdateManyWithWhereWithoutFoodInput | SubFoodUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: SubFoodScalarWhereInput | SubFoodScalarWhereInput[]
  }

  export type OrderTableUpdateManyWithoutFoodNestedInput = {
    create?: XOR<OrderTableCreateWithoutFoodInput, OrderTableUncheckedCreateWithoutFoodInput> | OrderTableCreateWithoutFoodInput[] | OrderTableUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: OrderTableCreateOrConnectWithoutFoodInput | OrderTableCreateOrConnectWithoutFoodInput[]
    upsert?: OrderTableUpsertWithWhereUniqueWithoutFoodInput | OrderTableUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: OrderTableCreateManyFoodInputEnvelope
    set?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    disconnect?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    delete?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    connect?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    update?: OrderTableUpdateWithWhereUniqueWithoutFoodInput | OrderTableUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: OrderTableUpdateManyWithWhereWithoutFoodInput | OrderTableUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: OrderTableScalarWhereInput | OrderTableScalarWhereInput[]
  }

  export type SubFoodUncheckedUpdateManyWithoutFoodNestedInput = {
    create?: XOR<SubFoodCreateWithoutFoodInput, SubFoodUncheckedCreateWithoutFoodInput> | SubFoodCreateWithoutFoodInput[] | SubFoodUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: SubFoodCreateOrConnectWithoutFoodInput | SubFoodCreateOrConnectWithoutFoodInput[]
    upsert?: SubFoodUpsertWithWhereUniqueWithoutFoodInput | SubFoodUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: SubFoodCreateManyFoodInputEnvelope
    set?: SubFoodWhereUniqueInput | SubFoodWhereUniqueInput[]
    disconnect?: SubFoodWhereUniqueInput | SubFoodWhereUniqueInput[]
    delete?: SubFoodWhereUniqueInput | SubFoodWhereUniqueInput[]
    connect?: SubFoodWhereUniqueInput | SubFoodWhereUniqueInput[]
    update?: SubFoodUpdateWithWhereUniqueWithoutFoodInput | SubFoodUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: SubFoodUpdateManyWithWhereWithoutFoodInput | SubFoodUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: SubFoodScalarWhereInput | SubFoodScalarWhereInput[]
  }

  export type OrderTableUncheckedUpdateManyWithoutFoodNestedInput = {
    create?: XOR<OrderTableCreateWithoutFoodInput, OrderTableUncheckedCreateWithoutFoodInput> | OrderTableCreateWithoutFoodInput[] | OrderTableUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: OrderTableCreateOrConnectWithoutFoodInput | OrderTableCreateOrConnectWithoutFoodInput[]
    upsert?: OrderTableUpsertWithWhereUniqueWithoutFoodInput | OrderTableUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: OrderTableCreateManyFoodInputEnvelope
    set?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    disconnect?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    delete?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    connect?: OrderTableWhereUniqueInput | OrderTableWhereUniqueInput[]
    update?: OrderTableUpdateWithWhereUniqueWithoutFoodInput | OrderTableUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: OrderTableUpdateManyWithWhereWithoutFoodInput | OrderTableUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: OrderTableScalarWhereInput | OrderTableScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOrder_tableInput = {
    create?: XOR<UserCreateWithoutOrder_tableInput, UserUncheckedCreateWithoutOrder_tableInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrder_tableInput
    connect?: UserWhereUniqueInput
  }

  export type FoodCreateNestedOneWithoutOrder_tablesInput = {
    create?: XOR<FoodCreateWithoutOrder_tablesInput, FoodUncheckedCreateWithoutOrder_tablesInput>
    connectOrCreate?: FoodCreateOrConnectWithoutOrder_tablesInput
    connect?: FoodWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutOrder_tableNestedInput = {
    create?: XOR<UserCreateWithoutOrder_tableInput, UserUncheckedCreateWithoutOrder_tableInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrder_tableInput
    upsert?: UserUpsertWithoutOrder_tableInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrder_tableInput, UserUpdateWithoutOrder_tableInput>, UserUncheckedUpdateWithoutOrder_tableInput>
  }

  export type FoodUpdateOneRequiredWithoutOrder_tablesNestedInput = {
    create?: XOR<FoodCreateWithoutOrder_tablesInput, FoodUncheckedCreateWithoutOrder_tablesInput>
    connectOrCreate?: FoodCreateOrConnectWithoutOrder_tablesInput
    upsert?: FoodUpsertWithoutOrder_tablesInput
    connect?: FoodWhereUniqueInput
    update?: XOR<XOR<FoodUpdateToOneWithWhereWithoutOrder_tablesInput, FoodUpdateWithoutOrder_tablesInput>, FoodUncheckedUpdateWithoutOrder_tablesInput>
  }

  export type FoodCreateNestedOneWithoutSub_foodsInput = {
    create?: XOR<FoodCreateWithoutSub_foodsInput, FoodUncheckedCreateWithoutSub_foodsInput>
    connectOrCreate?: FoodCreateOrConnectWithoutSub_foodsInput
    connect?: FoodWhereUniqueInput
  }

  export type FoodUpdateOneRequiredWithoutSub_foodsNestedInput = {
    create?: XOR<FoodCreateWithoutSub_foodsInput, FoodUncheckedCreateWithoutSub_foodsInput>
    connectOrCreate?: FoodCreateOrConnectWithoutSub_foodsInput
    upsert?: FoodUpsertWithoutSub_foodsInput
    connect?: FoodWhereUniqueInput
    update?: XOR<XOR<FoodUpdateToOneWithWhereWithoutSub_foodsInput, FoodUpdateWithoutSub_foodsInput>, FoodUncheckedUpdateWithoutSub_foodsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type RateResCreateWithoutUserInput = {
    amount: number
    date_rate?: Date | string
    restaurant: RestaurantCreateNestedOneWithoutRate_resInput
  }

  export type RateResUncheckedCreateWithoutUserInput = {
    res_id: number
    amount: number
    date_rate?: Date | string
  }

  export type RateResCreateOrConnectWithoutUserInput = {
    where: RateResWhereUniqueInput
    create: XOR<RateResCreateWithoutUserInput, RateResUncheckedCreateWithoutUserInput>
  }

  export type RateResCreateManyUserInputEnvelope = {
    data: RateResCreateManyUserInput | RateResCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LikeResCreateWithoutUserInput = {
    date_like: Date | string
    restaurant: RestaurantCreateNestedOneWithoutLike_resInput
  }

  export type LikeResUncheckedCreateWithoutUserInput = {
    res_id: number
    date_like: Date | string
  }

  export type LikeResCreateOrConnectWithoutUserInput = {
    where: LikeResWhereUniqueInput
    create: XOR<LikeResCreateWithoutUserInput, LikeResUncheckedCreateWithoutUserInput>
  }

  export type LikeResCreateManyUserInputEnvelope = {
    data: LikeResCreateManyUserInput | LikeResCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrderTableCreateWithoutUserInput = {
    amount: number
    code: string
    arr_sub_id?: string | null
    food: FoodCreateNestedOneWithoutOrder_tablesInput
  }

  export type OrderTableUncheckedCreateWithoutUserInput = {
    id?: number
    food_id: number
    amount: number
    code: string
    arr_sub_id?: string | null
  }

  export type OrderTableCreateOrConnectWithoutUserInput = {
    where: OrderTableWhereUniqueInput
    create: XOR<OrderTableCreateWithoutUserInput, OrderTableUncheckedCreateWithoutUserInput>
  }

  export type OrderTableCreateManyUserInputEnvelope = {
    data: OrderTableCreateManyUserInput | OrderTableCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RateResUpsertWithWhereUniqueWithoutUserInput = {
    where: RateResWhereUniqueInput
    update: XOR<RateResUpdateWithoutUserInput, RateResUncheckedUpdateWithoutUserInput>
    create: XOR<RateResCreateWithoutUserInput, RateResUncheckedCreateWithoutUserInput>
  }

  export type RateResUpdateWithWhereUniqueWithoutUserInput = {
    where: RateResWhereUniqueInput
    data: XOR<RateResUpdateWithoutUserInput, RateResUncheckedUpdateWithoutUserInput>
  }

  export type RateResUpdateManyWithWhereWithoutUserInput = {
    where: RateResScalarWhereInput
    data: XOR<RateResUpdateManyMutationInput, RateResUncheckedUpdateManyWithoutUserInput>
  }

  export type RateResScalarWhereInput = {
    AND?: RateResScalarWhereInput | RateResScalarWhereInput[]
    OR?: RateResScalarWhereInput[]
    NOT?: RateResScalarWhereInput | RateResScalarWhereInput[]
    user_id?: IntFilter<"RateRes"> | number
    res_id?: IntFilter<"RateRes"> | number
    amount?: IntFilter<"RateRes"> | number
    date_rate?: DateTimeFilter<"RateRes"> | Date | string
  }

  export type LikeResUpsertWithWhereUniqueWithoutUserInput = {
    where: LikeResWhereUniqueInput
    update: XOR<LikeResUpdateWithoutUserInput, LikeResUncheckedUpdateWithoutUserInput>
    create: XOR<LikeResCreateWithoutUserInput, LikeResUncheckedCreateWithoutUserInput>
  }

  export type LikeResUpdateWithWhereUniqueWithoutUserInput = {
    where: LikeResWhereUniqueInput
    data: XOR<LikeResUpdateWithoutUserInput, LikeResUncheckedUpdateWithoutUserInput>
  }

  export type LikeResUpdateManyWithWhereWithoutUserInput = {
    where: LikeResScalarWhereInput
    data: XOR<LikeResUpdateManyMutationInput, LikeResUncheckedUpdateManyWithoutUserInput>
  }

  export type LikeResScalarWhereInput = {
    AND?: LikeResScalarWhereInput | LikeResScalarWhereInput[]
    OR?: LikeResScalarWhereInput[]
    NOT?: LikeResScalarWhereInput | LikeResScalarWhereInput[]
    user_id?: IntFilter<"LikeRes"> | number
    res_id?: IntFilter<"LikeRes"> | number
    date_like?: DateTimeFilter<"LikeRes"> | Date | string
  }

  export type OrderTableUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderTableWhereUniqueInput
    update: XOR<OrderTableUpdateWithoutUserInput, OrderTableUncheckedUpdateWithoutUserInput>
    create: XOR<OrderTableCreateWithoutUserInput, OrderTableUncheckedCreateWithoutUserInput>
  }

  export type OrderTableUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderTableWhereUniqueInput
    data: XOR<OrderTableUpdateWithoutUserInput, OrderTableUncheckedUpdateWithoutUserInput>
  }

  export type OrderTableUpdateManyWithWhereWithoutUserInput = {
    where: OrderTableScalarWhereInput
    data: XOR<OrderTableUpdateManyMutationInput, OrderTableUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderTableScalarWhereInput = {
    AND?: OrderTableScalarWhereInput | OrderTableScalarWhereInput[]
    OR?: OrderTableScalarWhereInput[]
    NOT?: OrderTableScalarWhereInput | OrderTableScalarWhereInput[]
    id?: IntFilter<"OrderTable"> | number
    user_id?: IntFilter<"OrderTable"> | number
    food_id?: IntFilter<"OrderTable"> | number
    amount?: IntFilter<"OrderTable"> | number
    code?: StringFilter<"OrderTable"> | string
    arr_sub_id?: StringNullableFilter<"OrderTable"> | string | null
  }

  export type UserCreateWithoutRate_resInput = {
    full_name: string
    email: string
    password: string
    like_res?: LikeResCreateNestedManyWithoutUserInput
    order_table?: OrderTableCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRate_resInput = {
    user_id?: number
    full_name: string
    email: string
    password: string
    like_res?: LikeResUncheckedCreateNestedManyWithoutUserInput
    order_table?: OrderTableUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRate_resInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRate_resInput, UserUncheckedCreateWithoutRate_resInput>
  }

  export type RestaurantCreateWithoutRate_resInput = {
    res_name: string
    image: string
    description: string
    like_res?: LikeResCreateNestedManyWithoutRestaurantInput
  }

  export type RestaurantUncheckedCreateWithoutRate_resInput = {
    res_id?: number
    res_name: string
    image: string
    description: string
    like_res?: LikeResUncheckedCreateNestedManyWithoutRestaurantInput
  }

  export type RestaurantCreateOrConnectWithoutRate_resInput = {
    where: RestaurantWhereUniqueInput
    create: XOR<RestaurantCreateWithoutRate_resInput, RestaurantUncheckedCreateWithoutRate_resInput>
  }

  export type UserUpsertWithoutRate_resInput = {
    update: XOR<UserUpdateWithoutRate_resInput, UserUncheckedUpdateWithoutRate_resInput>
    create: XOR<UserCreateWithoutRate_resInput, UserUncheckedCreateWithoutRate_resInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRate_resInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRate_resInput, UserUncheckedUpdateWithoutRate_resInput>
  }

  export type UserUpdateWithoutRate_resInput = {
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    like_res?: LikeResUpdateManyWithoutUserNestedInput
    order_table?: OrderTableUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRate_resInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    like_res?: LikeResUncheckedUpdateManyWithoutUserNestedInput
    order_table?: OrderTableUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RestaurantUpsertWithoutRate_resInput = {
    update: XOR<RestaurantUpdateWithoutRate_resInput, RestaurantUncheckedUpdateWithoutRate_resInput>
    create: XOR<RestaurantCreateWithoutRate_resInput, RestaurantUncheckedCreateWithoutRate_resInput>
    where?: RestaurantWhereInput
  }

  export type RestaurantUpdateToOneWithWhereWithoutRate_resInput = {
    where?: RestaurantWhereInput
    data: XOR<RestaurantUpdateWithoutRate_resInput, RestaurantUncheckedUpdateWithoutRate_resInput>
  }

  export type RestaurantUpdateWithoutRate_resInput = {
    res_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    like_res?: LikeResUpdateManyWithoutRestaurantNestedInput
  }

  export type RestaurantUncheckedUpdateWithoutRate_resInput = {
    res_id?: IntFieldUpdateOperationsInput | number
    res_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    like_res?: LikeResUncheckedUpdateManyWithoutRestaurantNestedInput
  }

  export type RateResCreateWithoutRestaurantInput = {
    amount: number
    date_rate?: Date | string
    user: UserCreateNestedOneWithoutRate_resInput
  }

  export type RateResUncheckedCreateWithoutRestaurantInput = {
    user_id: number
    amount: number
    date_rate?: Date | string
  }

  export type RateResCreateOrConnectWithoutRestaurantInput = {
    where: RateResWhereUniqueInput
    create: XOR<RateResCreateWithoutRestaurantInput, RateResUncheckedCreateWithoutRestaurantInput>
  }

  export type RateResCreateManyRestaurantInputEnvelope = {
    data: RateResCreateManyRestaurantInput | RateResCreateManyRestaurantInput[]
    skipDuplicates?: boolean
  }

  export type LikeResCreateWithoutRestaurantInput = {
    date_like: Date | string
    user: UserCreateNestedOneWithoutLike_resInput
  }

  export type LikeResUncheckedCreateWithoutRestaurantInput = {
    user_id: number
    date_like: Date | string
  }

  export type LikeResCreateOrConnectWithoutRestaurantInput = {
    where: LikeResWhereUniqueInput
    create: XOR<LikeResCreateWithoutRestaurantInput, LikeResUncheckedCreateWithoutRestaurantInput>
  }

  export type LikeResCreateManyRestaurantInputEnvelope = {
    data: LikeResCreateManyRestaurantInput | LikeResCreateManyRestaurantInput[]
    skipDuplicates?: boolean
  }

  export type RateResUpsertWithWhereUniqueWithoutRestaurantInput = {
    where: RateResWhereUniqueInput
    update: XOR<RateResUpdateWithoutRestaurantInput, RateResUncheckedUpdateWithoutRestaurantInput>
    create: XOR<RateResCreateWithoutRestaurantInput, RateResUncheckedCreateWithoutRestaurantInput>
  }

  export type RateResUpdateWithWhereUniqueWithoutRestaurantInput = {
    where: RateResWhereUniqueInput
    data: XOR<RateResUpdateWithoutRestaurantInput, RateResUncheckedUpdateWithoutRestaurantInput>
  }

  export type RateResUpdateManyWithWhereWithoutRestaurantInput = {
    where: RateResScalarWhereInput
    data: XOR<RateResUpdateManyMutationInput, RateResUncheckedUpdateManyWithoutRestaurantInput>
  }

  export type LikeResUpsertWithWhereUniqueWithoutRestaurantInput = {
    where: LikeResWhereUniqueInput
    update: XOR<LikeResUpdateWithoutRestaurantInput, LikeResUncheckedUpdateWithoutRestaurantInput>
    create: XOR<LikeResCreateWithoutRestaurantInput, LikeResUncheckedCreateWithoutRestaurantInput>
  }

  export type LikeResUpdateWithWhereUniqueWithoutRestaurantInput = {
    where: LikeResWhereUniqueInput
    data: XOR<LikeResUpdateWithoutRestaurantInput, LikeResUncheckedUpdateWithoutRestaurantInput>
  }

  export type LikeResUpdateManyWithWhereWithoutRestaurantInput = {
    where: LikeResScalarWhereInput
    data: XOR<LikeResUpdateManyMutationInput, LikeResUncheckedUpdateManyWithoutRestaurantInput>
  }

  export type UserCreateWithoutLike_resInput = {
    full_name: string
    email: string
    password: string
    rate_res?: RateResCreateNestedManyWithoutUserInput
    order_table?: OrderTableCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLike_resInput = {
    user_id?: number
    full_name: string
    email: string
    password: string
    rate_res?: RateResUncheckedCreateNestedManyWithoutUserInput
    order_table?: OrderTableUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLike_resInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLike_resInput, UserUncheckedCreateWithoutLike_resInput>
  }

  export type RestaurantCreateWithoutLike_resInput = {
    res_name: string
    image: string
    description: string
    rate_res?: RateResCreateNestedManyWithoutRestaurantInput
  }

  export type RestaurantUncheckedCreateWithoutLike_resInput = {
    res_id?: number
    res_name: string
    image: string
    description: string
    rate_res?: RateResUncheckedCreateNestedManyWithoutRestaurantInput
  }

  export type RestaurantCreateOrConnectWithoutLike_resInput = {
    where: RestaurantWhereUniqueInput
    create: XOR<RestaurantCreateWithoutLike_resInput, RestaurantUncheckedCreateWithoutLike_resInput>
  }

  export type UserUpsertWithoutLike_resInput = {
    update: XOR<UserUpdateWithoutLike_resInput, UserUncheckedUpdateWithoutLike_resInput>
    create: XOR<UserCreateWithoutLike_resInput, UserUncheckedCreateWithoutLike_resInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLike_resInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLike_resInput, UserUncheckedUpdateWithoutLike_resInput>
  }

  export type UserUpdateWithoutLike_resInput = {
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rate_res?: RateResUpdateManyWithoutUserNestedInput
    order_table?: OrderTableUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLike_resInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rate_res?: RateResUncheckedUpdateManyWithoutUserNestedInput
    order_table?: OrderTableUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RestaurantUpsertWithoutLike_resInput = {
    update: XOR<RestaurantUpdateWithoutLike_resInput, RestaurantUncheckedUpdateWithoutLike_resInput>
    create: XOR<RestaurantCreateWithoutLike_resInput, RestaurantUncheckedCreateWithoutLike_resInput>
    where?: RestaurantWhereInput
  }

  export type RestaurantUpdateToOneWithWhereWithoutLike_resInput = {
    where?: RestaurantWhereInput
    data: XOR<RestaurantUpdateWithoutLike_resInput, RestaurantUncheckedUpdateWithoutLike_resInput>
  }

  export type RestaurantUpdateWithoutLike_resInput = {
    res_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rate_res?: RateResUpdateManyWithoutRestaurantNestedInput
  }

  export type RestaurantUncheckedUpdateWithoutLike_resInput = {
    res_id?: IntFieldUpdateOperationsInput | number
    res_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rate_res?: RateResUncheckedUpdateManyWithoutRestaurantNestedInput
  }

  export type FoodCreateWithoutTypeInput = {
    food_name: string
    image: string
    price: number
    description: string
    sub_foods?: SubFoodCreateNestedManyWithoutFoodInput
    order_tables?: OrderTableCreateNestedManyWithoutFoodInput
  }

  export type FoodUncheckedCreateWithoutTypeInput = {
    food_id?: number
    food_name: string
    image: string
    price: number
    description: string
    sub_foods?: SubFoodUncheckedCreateNestedManyWithoutFoodInput
    order_tables?: OrderTableUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodCreateOrConnectWithoutTypeInput = {
    where: FoodWhereUniqueInput
    create: XOR<FoodCreateWithoutTypeInput, FoodUncheckedCreateWithoutTypeInput>
  }

  export type FoodCreateManyTypeInputEnvelope = {
    data: FoodCreateManyTypeInput | FoodCreateManyTypeInput[]
    skipDuplicates?: boolean
  }

  export type FoodUpsertWithWhereUniqueWithoutTypeInput = {
    where: FoodWhereUniqueInput
    update: XOR<FoodUpdateWithoutTypeInput, FoodUncheckedUpdateWithoutTypeInput>
    create: XOR<FoodCreateWithoutTypeInput, FoodUncheckedCreateWithoutTypeInput>
  }

  export type FoodUpdateWithWhereUniqueWithoutTypeInput = {
    where: FoodWhereUniqueInput
    data: XOR<FoodUpdateWithoutTypeInput, FoodUncheckedUpdateWithoutTypeInput>
  }

  export type FoodUpdateManyWithWhereWithoutTypeInput = {
    where: FoodScalarWhereInput
    data: XOR<FoodUpdateManyMutationInput, FoodUncheckedUpdateManyWithoutTypeInput>
  }

  export type FoodScalarWhereInput = {
    AND?: FoodScalarWhereInput | FoodScalarWhereInput[]
    OR?: FoodScalarWhereInput[]
    NOT?: FoodScalarWhereInput | FoodScalarWhereInput[]
    food_id?: IntFilter<"Food"> | number
    food_name?: StringFilter<"Food"> | string
    image?: StringFilter<"Food"> | string
    price?: FloatFilter<"Food"> | number
    description?: StringFilter<"Food"> | string
    type_id?: IntFilter<"Food"> | number
  }

  export type FoodTypeCreateWithoutFoodsInput = {
    type_name: string
  }

  export type FoodTypeUncheckedCreateWithoutFoodsInput = {
    type_id?: number
    type_name: string
  }

  export type FoodTypeCreateOrConnectWithoutFoodsInput = {
    where: FoodTypeWhereUniqueInput
    create: XOR<FoodTypeCreateWithoutFoodsInput, FoodTypeUncheckedCreateWithoutFoodsInput>
  }

  export type SubFoodCreateWithoutFoodInput = {
    sub_name: string
    sub_price: number
  }

  export type SubFoodUncheckedCreateWithoutFoodInput = {
    sub_id?: number
    sub_name: string
    sub_price: number
  }

  export type SubFoodCreateOrConnectWithoutFoodInput = {
    where: SubFoodWhereUniqueInput
    create: XOR<SubFoodCreateWithoutFoodInput, SubFoodUncheckedCreateWithoutFoodInput>
  }

  export type SubFoodCreateManyFoodInputEnvelope = {
    data: SubFoodCreateManyFoodInput | SubFoodCreateManyFoodInput[]
    skipDuplicates?: boolean
  }

  export type OrderTableCreateWithoutFoodInput = {
    amount: number
    code: string
    arr_sub_id?: string | null
    user: UserCreateNestedOneWithoutOrder_tableInput
  }

  export type OrderTableUncheckedCreateWithoutFoodInput = {
    id?: number
    user_id: number
    amount: number
    code: string
    arr_sub_id?: string | null
  }

  export type OrderTableCreateOrConnectWithoutFoodInput = {
    where: OrderTableWhereUniqueInput
    create: XOR<OrderTableCreateWithoutFoodInput, OrderTableUncheckedCreateWithoutFoodInput>
  }

  export type OrderTableCreateManyFoodInputEnvelope = {
    data: OrderTableCreateManyFoodInput | OrderTableCreateManyFoodInput[]
    skipDuplicates?: boolean
  }

  export type FoodTypeUpsertWithoutFoodsInput = {
    update: XOR<FoodTypeUpdateWithoutFoodsInput, FoodTypeUncheckedUpdateWithoutFoodsInput>
    create: XOR<FoodTypeCreateWithoutFoodsInput, FoodTypeUncheckedCreateWithoutFoodsInput>
    where?: FoodTypeWhereInput
  }

  export type FoodTypeUpdateToOneWithWhereWithoutFoodsInput = {
    where?: FoodTypeWhereInput
    data: XOR<FoodTypeUpdateWithoutFoodsInput, FoodTypeUncheckedUpdateWithoutFoodsInput>
  }

  export type FoodTypeUpdateWithoutFoodsInput = {
    type_name?: StringFieldUpdateOperationsInput | string
  }

  export type FoodTypeUncheckedUpdateWithoutFoodsInput = {
    type_id?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
  }

  export type SubFoodUpsertWithWhereUniqueWithoutFoodInput = {
    where: SubFoodWhereUniqueInput
    update: XOR<SubFoodUpdateWithoutFoodInput, SubFoodUncheckedUpdateWithoutFoodInput>
    create: XOR<SubFoodCreateWithoutFoodInput, SubFoodUncheckedCreateWithoutFoodInput>
  }

  export type SubFoodUpdateWithWhereUniqueWithoutFoodInput = {
    where: SubFoodWhereUniqueInput
    data: XOR<SubFoodUpdateWithoutFoodInput, SubFoodUncheckedUpdateWithoutFoodInput>
  }

  export type SubFoodUpdateManyWithWhereWithoutFoodInput = {
    where: SubFoodScalarWhereInput
    data: XOR<SubFoodUpdateManyMutationInput, SubFoodUncheckedUpdateManyWithoutFoodInput>
  }

  export type SubFoodScalarWhereInput = {
    AND?: SubFoodScalarWhereInput | SubFoodScalarWhereInput[]
    OR?: SubFoodScalarWhereInput[]
    NOT?: SubFoodScalarWhereInput | SubFoodScalarWhereInput[]
    sub_id?: IntFilter<"SubFood"> | number
    sub_name?: StringFilter<"SubFood"> | string
    sub_price?: FloatFilter<"SubFood"> | number
    food_id?: IntFilter<"SubFood"> | number
  }

  export type OrderTableUpsertWithWhereUniqueWithoutFoodInput = {
    where: OrderTableWhereUniqueInput
    update: XOR<OrderTableUpdateWithoutFoodInput, OrderTableUncheckedUpdateWithoutFoodInput>
    create: XOR<OrderTableCreateWithoutFoodInput, OrderTableUncheckedCreateWithoutFoodInput>
  }

  export type OrderTableUpdateWithWhereUniqueWithoutFoodInput = {
    where: OrderTableWhereUniqueInput
    data: XOR<OrderTableUpdateWithoutFoodInput, OrderTableUncheckedUpdateWithoutFoodInput>
  }

  export type OrderTableUpdateManyWithWhereWithoutFoodInput = {
    where: OrderTableScalarWhereInput
    data: XOR<OrderTableUpdateManyMutationInput, OrderTableUncheckedUpdateManyWithoutFoodInput>
  }

  export type UserCreateWithoutOrder_tableInput = {
    full_name: string
    email: string
    password: string
    rate_res?: RateResCreateNestedManyWithoutUserInput
    like_res?: LikeResCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrder_tableInput = {
    user_id?: number
    full_name: string
    email: string
    password: string
    rate_res?: RateResUncheckedCreateNestedManyWithoutUserInput
    like_res?: LikeResUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrder_tableInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrder_tableInput, UserUncheckedCreateWithoutOrder_tableInput>
  }

  export type FoodCreateWithoutOrder_tablesInput = {
    food_name: string
    image: string
    price: number
    description: string
    type: FoodTypeCreateNestedOneWithoutFoodsInput
    sub_foods?: SubFoodCreateNestedManyWithoutFoodInput
  }

  export type FoodUncheckedCreateWithoutOrder_tablesInput = {
    food_id?: number
    food_name: string
    image: string
    price: number
    description: string
    type_id: number
    sub_foods?: SubFoodUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodCreateOrConnectWithoutOrder_tablesInput = {
    where: FoodWhereUniqueInput
    create: XOR<FoodCreateWithoutOrder_tablesInput, FoodUncheckedCreateWithoutOrder_tablesInput>
  }

  export type UserUpsertWithoutOrder_tableInput = {
    update: XOR<UserUpdateWithoutOrder_tableInput, UserUncheckedUpdateWithoutOrder_tableInput>
    create: XOR<UserCreateWithoutOrder_tableInput, UserUncheckedCreateWithoutOrder_tableInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrder_tableInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrder_tableInput, UserUncheckedUpdateWithoutOrder_tableInput>
  }

  export type UserUpdateWithoutOrder_tableInput = {
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rate_res?: RateResUpdateManyWithoutUserNestedInput
    like_res?: LikeResUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrder_tableInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rate_res?: RateResUncheckedUpdateManyWithoutUserNestedInput
    like_res?: LikeResUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FoodUpsertWithoutOrder_tablesInput = {
    update: XOR<FoodUpdateWithoutOrder_tablesInput, FoodUncheckedUpdateWithoutOrder_tablesInput>
    create: XOR<FoodCreateWithoutOrder_tablesInput, FoodUncheckedCreateWithoutOrder_tablesInput>
    where?: FoodWhereInput
  }

  export type FoodUpdateToOneWithWhereWithoutOrder_tablesInput = {
    where?: FoodWhereInput
    data: XOR<FoodUpdateWithoutOrder_tablesInput, FoodUncheckedUpdateWithoutOrder_tablesInput>
  }

  export type FoodUpdateWithoutOrder_tablesInput = {
    food_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: FoodTypeUpdateOneRequiredWithoutFoodsNestedInput
    sub_foods?: SubFoodUpdateManyWithoutFoodNestedInput
  }

  export type FoodUncheckedUpdateWithoutOrder_tablesInput = {
    food_id?: IntFieldUpdateOperationsInput | number
    food_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type_id?: IntFieldUpdateOperationsInput | number
    sub_foods?: SubFoodUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type FoodCreateWithoutSub_foodsInput = {
    food_name: string
    image: string
    price: number
    description: string
    type: FoodTypeCreateNestedOneWithoutFoodsInput
    order_tables?: OrderTableCreateNestedManyWithoutFoodInput
  }

  export type FoodUncheckedCreateWithoutSub_foodsInput = {
    food_id?: number
    food_name: string
    image: string
    price: number
    description: string
    type_id: number
    order_tables?: OrderTableUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodCreateOrConnectWithoutSub_foodsInput = {
    where: FoodWhereUniqueInput
    create: XOR<FoodCreateWithoutSub_foodsInput, FoodUncheckedCreateWithoutSub_foodsInput>
  }

  export type FoodUpsertWithoutSub_foodsInput = {
    update: XOR<FoodUpdateWithoutSub_foodsInput, FoodUncheckedUpdateWithoutSub_foodsInput>
    create: XOR<FoodCreateWithoutSub_foodsInput, FoodUncheckedCreateWithoutSub_foodsInput>
    where?: FoodWhereInput
  }

  export type FoodUpdateToOneWithWhereWithoutSub_foodsInput = {
    where?: FoodWhereInput
    data: XOR<FoodUpdateWithoutSub_foodsInput, FoodUncheckedUpdateWithoutSub_foodsInput>
  }

  export type FoodUpdateWithoutSub_foodsInput = {
    food_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: FoodTypeUpdateOneRequiredWithoutFoodsNestedInput
    order_tables?: OrderTableUpdateManyWithoutFoodNestedInput
  }

  export type FoodUncheckedUpdateWithoutSub_foodsInput = {
    food_id?: IntFieldUpdateOperationsInput | number
    food_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type_id?: IntFieldUpdateOperationsInput | number
    order_tables?: OrderTableUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type RateResCreateManyUserInput = {
    res_id: number
    amount: number
    date_rate?: Date | string
  }

  export type LikeResCreateManyUserInput = {
    res_id: number
    date_like: Date | string
  }

  export type OrderTableCreateManyUserInput = {
    id?: number
    food_id: number
    amount: number
    code: string
    arr_sub_id?: string | null
  }

  export type RateResUpdateWithoutUserInput = {
    amount?: IntFieldUpdateOperationsInput | number
    date_rate?: DateTimeFieldUpdateOperationsInput | Date | string
    restaurant?: RestaurantUpdateOneRequiredWithoutRate_resNestedInput
  }

  export type RateResUncheckedUpdateWithoutUserInput = {
    res_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    date_rate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RateResUncheckedUpdateManyWithoutUserInput = {
    res_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    date_rate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeResUpdateWithoutUserInput = {
    date_like?: DateTimeFieldUpdateOperationsInput | Date | string
    restaurant?: RestaurantUpdateOneRequiredWithoutLike_resNestedInput
  }

  export type LikeResUncheckedUpdateWithoutUserInput = {
    res_id?: IntFieldUpdateOperationsInput | number
    date_like?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeResUncheckedUpdateManyWithoutUserInput = {
    res_id?: IntFieldUpdateOperationsInput | number
    date_like?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderTableUpdateWithoutUserInput = {
    amount?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    arr_sub_id?: NullableStringFieldUpdateOperationsInput | string | null
    food?: FoodUpdateOneRequiredWithoutOrder_tablesNestedInput
  }

  export type OrderTableUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    food_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    arr_sub_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderTableUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    food_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    arr_sub_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RateResCreateManyRestaurantInput = {
    user_id: number
    amount: number
    date_rate?: Date | string
  }

  export type LikeResCreateManyRestaurantInput = {
    user_id: number
    date_like: Date | string
  }

  export type RateResUpdateWithoutRestaurantInput = {
    amount?: IntFieldUpdateOperationsInput | number
    date_rate?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRate_resNestedInput
  }

  export type RateResUncheckedUpdateWithoutRestaurantInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    date_rate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RateResUncheckedUpdateManyWithoutRestaurantInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    date_rate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeResUpdateWithoutRestaurantInput = {
    date_like?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLike_resNestedInput
  }

  export type LikeResUncheckedUpdateWithoutRestaurantInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    date_like?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeResUncheckedUpdateManyWithoutRestaurantInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    date_like?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodCreateManyTypeInput = {
    food_id?: number
    food_name: string
    image: string
    price: number
    description: string
  }

  export type FoodUpdateWithoutTypeInput = {
    food_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    sub_foods?: SubFoodUpdateManyWithoutFoodNestedInput
    order_tables?: OrderTableUpdateManyWithoutFoodNestedInput
  }

  export type FoodUncheckedUpdateWithoutTypeInput = {
    food_id?: IntFieldUpdateOperationsInput | number
    food_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    sub_foods?: SubFoodUncheckedUpdateManyWithoutFoodNestedInput
    order_tables?: OrderTableUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type FoodUncheckedUpdateManyWithoutTypeInput = {
    food_id?: IntFieldUpdateOperationsInput | number
    food_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type SubFoodCreateManyFoodInput = {
    sub_id?: number
    sub_name: string
    sub_price: number
  }

  export type OrderTableCreateManyFoodInput = {
    id?: number
    user_id: number
    amount: number
    code: string
    arr_sub_id?: string | null
  }

  export type SubFoodUpdateWithoutFoodInput = {
    sub_name?: StringFieldUpdateOperationsInput | string
    sub_price?: FloatFieldUpdateOperationsInput | number
  }

  export type SubFoodUncheckedUpdateWithoutFoodInput = {
    sub_id?: IntFieldUpdateOperationsInput | number
    sub_name?: StringFieldUpdateOperationsInput | string
    sub_price?: FloatFieldUpdateOperationsInput | number
  }

  export type SubFoodUncheckedUpdateManyWithoutFoodInput = {
    sub_id?: IntFieldUpdateOperationsInput | number
    sub_name?: StringFieldUpdateOperationsInput | string
    sub_price?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderTableUpdateWithoutFoodInput = {
    amount?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    arr_sub_id?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutOrder_tableNestedInput
  }

  export type OrderTableUncheckedUpdateWithoutFoodInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    arr_sub_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderTableUncheckedUpdateManyWithoutFoodInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    arr_sub_id?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RestaurantCountOutputTypeDefaultArgs instead
     */
    export type RestaurantCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RestaurantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FoodTypeCountOutputTypeDefaultArgs instead
     */
    export type FoodTypeCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FoodTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FoodCountOutputTypeDefaultArgs instead
     */
    export type FoodCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FoodCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RateResDefaultArgs instead
     */
    export type RateResArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RateResDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RestaurantDefaultArgs instead
     */
    export type RestaurantArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RestaurantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LikeResDefaultArgs instead
     */
    export type LikeResArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = LikeResDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FoodTypeDefaultArgs instead
     */
    export type FoodTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FoodTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FoodDefaultArgs instead
     */
    export type FoodArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FoodDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderTableDefaultArgs instead
     */
    export type OrderTableArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = OrderTableDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubFoodDefaultArgs instead
     */
    export type SubFoodArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SubFoodDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}